
Mech-Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000051e  00000592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e6  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081a  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046d  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000286  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  9e:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		while(!(NEW_MSG)); //wait for new byte
		a.asChar[i] = receive_byte(); //collect byte
	}
	return a.asFloat; //return float value
}
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  ba:	08 95       	ret

000000bc <print_byte>:

void print_byte(uint8_t value){
	//while(!(UCSR0A & (1<<UDRE0)));
	while(!(TRANSMIT_READY)); //after transmit line is ready
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <print_byte+0x4>
	UDR0 = value; //set transmit register to value
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ca:	08 95       	ret

000000cc <print_float>:
}

void print_float(float value){ 
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <print_float+0xe>
  da:	00 d0       	rcall	.+0      	; 0xdc <print_float+0x10>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
  e0:	69 83       	std	Y+1, r22	; 0x01
  e2:	7a 83       	std	Y+2, r23	; 0x02
  e4:	8b 83       	std	Y+3, r24	; 0x03
  e6:	9c 83       	std	Y+4, r25	; 0x04
  e8:	8e 01       	movw	r16, r28
  ea:	0f 5f       	subi	r16, 0xFF	; 255
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
  ee:	7e 01       	movw	r14, r28
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	e8 0e       	add	r14, r24
  f4:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		print_byte(b.asChar[i]); //send each byte
  f6:	f8 01       	movw	r30, r16
  f8:	81 91       	ld	r24, Z+
  fa:	8f 01       	movw	r16, r30
  fc:	0e 94 5e 00 	call	0xbc	; 0xbc <print_byte>
}

void print_float(float value){ 
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
 100:	0e 15       	cp	r16, r14
 102:	1f 05       	cpc	r17, r15
 104:	c1 f7       	brne	.-16     	; 0xf6 <print_float+0x2a>
		print_byte(b.asChar[i]); //send each byte
	}
}
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	08 95       	ret

0000011c <timer0_init>:
}

void timer0_init()
{	
	// enable CTC for Timer0
	TCCR0A |= (1 << WGM01);
 11c:	84 b5       	in	r24, 0x24	; 36
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	84 bd       	out	0x24, r24	; 36
	// enable prescaler of 1024 for Timer0
	TCCR0B |= (1 << CS02)|(1 << CS00);	
 122:	85 b5       	in	r24, 0x25	; 37
 124:	85 60       	ori	r24, 0x05	; 5
 126:	85 bd       	out	0x25, r24	; 37
	// initialize counter to zero
	TCNT0 = 0;	
 128:	16 bc       	out	0x26, r1	; 38
	// initialize compare value for CTC
	OCR0A = 155;
 12a:	8b e9       	ldi	r24, 0x9B	; 155
 12c:	87 bd       	out	0x27, r24	; 39
 12e:	08 95       	ret

00000130 <timer1_init>:
}

void timer1_init()
{
	TCCR1A |= 0;
 130:	e0 e8       	ldi	r30, 0x80	; 128
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 83       	st	Z, r24
	// Enable CTC for Timer1 with no prescaler
	TCCR1B |= (1 << WGM12)|(1 << CS10);
 138:	e1 e8       	ldi	r30, 0x81	; 129
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	89 60       	ori	r24, 0x09	; 9
 140:	80 83       	st	Z, r24
	// initialize counter to zero
	TCNT1 = 0;	
 142:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 146:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// initialize compare value
	OCR1B = 15999;
 14a:	8f e7       	ldi	r24, 0x7F	; 127
 14c:	9e e3       	ldi	r25, 0x3E	; 62
 14e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 152:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 156:	08 95       	ret

00000158 <adc_init>:


void adc_init() {
	
	//Set reference to built in channels
	ADMUX = (1<<REFS0);
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Enable ADC w/ prescaler
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 15e:	87 e8       	ldi	r24, 0x87	; 135
 160:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 164:	08 95       	ret

00000166 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	//select channel to read
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;	
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	98 7f       	andi	r25, 0xF8	; 248
 16e:	87 70       	andi	r24, 0x07	; 7
 170:	89 2b       	or	r24, r25
 172:	80 83       	st	Z, r24
	//start conversion
	ADCSRA |= (1<<ADSC);	
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(ADCSRA & (1<<ADSC));	
 17e:	80 81       	ld	r24, Z
 180:	86 fd       	sbrc	r24, 6
 182:	fd cf       	rjmp	.-6      	; 0x17e <adc_read+0x18>
	//return result
	return (ADC);
 184:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 188:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 18c:	08 95       	ret

0000018e <main>:
	float asFloat;
	char asChars[4];
};*/

int main(void)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	6c 97       	sbiw	r28, 0x1c	; 28
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
	//struct Ring_Buffer_C output_queue;
	USART_Init(MYUBRR);
 1a2:	87 e6       	ldi	r24, 0x67	; 103
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
    //rb_initialize_C(&output_queue);

	timer0_init();
 1a8:	0e 94 8e 00 	call	0x11c	; 0x11c <timer0_init>
	timer1_init();
 1ac:	0e 94 98 00 	call	0x130	; 0x130 <timer1_init>
	adc_init();
 1b0:	0e 94 ac 00 	call	0x158	; 0x158 <adc_init>
	//digital_filter_init(0);
	
	//Set AI0 to Output and rest as Input
	DDRC |= 0b00000001;
 1b4:	38 9a       	sbi	0x07, 0	; 7
	
	//Set output to 1 to power sensor
	PORTC |= 0b00000001;
 1b6:	40 9a       	sbi	0x08, 0	; 8
	float angPos = 0;
	//float angPosLast = 0;
	//float angVel = 0;
	//float filteredVel = 0;
	//union floatChars printVal;
	float convertCoeff[] = {-354.5305, 7.2116, -0.0543, 1.9698E-4, -3.5356E-7, 3.0609E-10, -1.0193E-13};
 1b8:	8c e1       	ldi	r24, 0x1C	; 28
 1ba:	e0 e0       	ldi	r30, 0x00	; 0
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	de 01       	movw	r26, r28
 1c0:	11 96       	adiw	r26, 0x01	; 1
 1c2:	01 90       	ld	r0, Z+
 1c4:	0d 92       	st	X+, r0
 1c6:	8a 95       	dec	r24
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x34>
	PORTC |= 0b00000001;
	
	//Sampling frequency for converting to velocity, 1/0.001
	//float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
 1ca:	41 2c       	mov	r4, r1
 1cc:	51 2c       	mov	r5, r1
 1ce:	32 01       	movw	r6, r4
 1d0:	5e 01       	movw	r10, r28
 1d2:	8d e1       	ldi	r24, 0x1D	; 29
 1d4:	a8 0e       	add	r10, r24
 1d6:	b1 1c       	adc	r11, r1
	float tempSum;

    while (1) 
    {
		//if TIMER0_flag
		if(TIFR0 & (1 << OCF0A))
 1d8:	a9 9b       	sbis	0x15, 1	; 21
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <main+0x58>
			/*printVal.asFloat = 500; //edit so we don't drop readings during prints
			printVal.asFloat = angPos;
			for(int i = 0; i < 4; i ++){
				rb_push_back_C(&output_queue, printVal.asChars[i]);
			}*/
			print_float(angPos);
 1dc:	c3 01       	movw	r24, r6
 1de:	b2 01       	movw	r22, r4
 1e0:	0e 94 66 00 	call	0xcc	; 0xcc <print_float>
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 1e4:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if(TIFR1 & (1 << OCF1A))
 1e6:	b1 9b       	sbis	0x16, 1	; 22
 1e8:	f7 cf       	rjmp	.-18     	; 0x1d8 <main+0x4a>
		{
			//read voltage 
			volt = adc_read(1);	
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 b3 00 	call	0x166	; 0x166 <adc_read>
 1f0:	bc 01       	movw	r22, r24
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 92 01 	call	0x324	; 0x324 <__floatunsisf>
 1fa:	6b 01       	movw	r12, r22
 1fc:	7c 01       	movw	r14, r24
			
			//convert to position in radians
			tempSum = convertCoeff[0];
 1fe:	49 80       	ldd	r4, Y+1	; 0x01
 200:	5a 80       	ldd	r5, Y+2	; 0x02
 202:	6b 80       	ldd	r6, Y+3	; 0x03
 204:	7c 80       	ldd	r7, Y+4	; 0x04
 206:	8e 01       	movw	r16, r28
 208:	0b 5f       	subi	r16, 0xFB	; 251
 20a:	1f 4f       	sbci	r17, 0xFF	; 255
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
				tempSum += convertCoeff[i]*volt;
 20c:	f8 01       	movw	r30, r16
 20e:	61 91       	ld	r22, Z+
 210:	71 91       	ld	r23, Z+
 212:	81 91       	ld	r24, Z+
 214:	91 91       	ld	r25, Z+
 216:	8f 01       	movw	r16, r30
 218:	a7 01       	movw	r20, r14
 21a:	96 01       	movw	r18, r12
 21c:	0e 94 20 02 	call	0x440	; 0x440 <__mulsf3>
 220:	9b 01       	movw	r18, r22
 222:	ac 01       	movw	r20, r24
 224:	c3 01       	movw	r24, r6
 226:	b2 01       	movw	r22, r4
 228:	0e 94 26 01 	call	0x24c	; 0x24c <__addsf3>
 22c:	2b 01       	movw	r4, r22
 22e:	3c 01       	movw	r6, r24
				volt *= volt;
 230:	a7 01       	movw	r20, r14
 232:	96 01       	movw	r18, r12
 234:	c7 01       	movw	r24, r14
 236:	b6 01       	movw	r22, r12
 238:	0e 94 20 02 	call	0x440	; 0x440 <__mulsf3>
 23c:	6b 01       	movw	r12, r22
 23e:	7c 01       	movw	r14, r24
			volt = adc_read(1);	
			
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
 240:	0a 15       	cp	r16, r10
 242:	1b 05       	cpc	r17, r11
 244:	19 f7       	brne	.-58     	; 0x20c <main+0x7e>
			
			//filter velocity
			//filteredVel = filterValue(angVel);
			
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 246:	b1 9a       	sbi	0x16, 1	; 22
 248:	c7 cf       	rjmp	.-114    	; 0x1d8 <main+0x4a>

0000024a <__subsf3>:
 24a:	50 58       	subi	r21, 0x80	; 128

0000024c <__addsf3>:
 24c:	bb 27       	eor	r27, r27
 24e:	aa 27       	eor	r26, r26
 250:	0e 94 3d 01 	call	0x27a	; 0x27a <__addsf3x>
 254:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_round>
 258:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fp_pscA>
 25c:	38 f0       	brcs	.+14     	; 0x26c <__addsf3+0x20>
 25e:	0e 94 df 01 	call	0x3be	; 0x3be <__fp_pscB>
 262:	20 f0       	brcs	.+8      	; 0x26c <__addsf3+0x20>
 264:	39 f4       	brne	.+14     	; 0x274 <__addsf3+0x28>
 266:	9f 3f       	cpi	r25, 0xFF	; 255
 268:	19 f4       	brne	.+6      	; 0x270 <__addsf3+0x24>
 26a:	26 f4       	brtc	.+8      	; 0x274 <__addsf3+0x28>
 26c:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__fp_nan>
 270:	0e f4       	brtc	.+2      	; 0x274 <__addsf3+0x28>
 272:	e0 95       	com	r30
 274:	e7 fb       	bst	r30, 7
 276:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_inf>

0000027a <__addsf3x>:
 27a:	e9 2f       	mov	r30, r25
 27c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__fp_split3>
 280:	58 f3       	brcs	.-42     	; 0x258 <__addsf3+0xc>
 282:	ba 17       	cp	r27, r26
 284:	62 07       	cpc	r22, r18
 286:	73 07       	cpc	r23, r19
 288:	84 07       	cpc	r24, r20
 28a:	95 07       	cpc	r25, r21
 28c:	20 f0       	brcs	.+8      	; 0x296 <__addsf3x+0x1c>
 28e:	79 f4       	brne	.+30     	; 0x2ae <__addsf3x+0x34>
 290:	a6 f5       	brtc	.+104    	; 0x2fa <__addsf3x+0x80>
 292:	0c 94 19 02 	jmp	0x432	; 0x432 <__fp_zero>
 296:	0e f4       	brtc	.+2      	; 0x29a <__addsf3x+0x20>
 298:	e0 95       	com	r30
 29a:	0b 2e       	mov	r0, r27
 29c:	ba 2f       	mov	r27, r26
 29e:	a0 2d       	mov	r26, r0
 2a0:	0b 01       	movw	r0, r22
 2a2:	b9 01       	movw	r22, r18
 2a4:	90 01       	movw	r18, r0
 2a6:	0c 01       	movw	r0, r24
 2a8:	ca 01       	movw	r24, r20
 2aa:	a0 01       	movw	r20, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	ff 27       	eor	r31, r31
 2b0:	59 1b       	sub	r21, r25
 2b2:	99 f0       	breq	.+38     	; 0x2da <__addsf3x+0x60>
 2b4:	59 3f       	cpi	r21, 0xF9	; 249
 2b6:	50 f4       	brcc	.+20     	; 0x2cc <__addsf3x+0x52>
 2b8:	50 3e       	cpi	r21, 0xE0	; 224
 2ba:	68 f1       	brcs	.+90     	; 0x316 <__addsf3x+0x9c>
 2bc:	1a 16       	cp	r1, r26
 2be:	f0 40       	sbci	r31, 0x00	; 0
 2c0:	a2 2f       	mov	r26, r18
 2c2:	23 2f       	mov	r18, r19
 2c4:	34 2f       	mov	r19, r20
 2c6:	44 27       	eor	r20, r20
 2c8:	58 5f       	subi	r21, 0xF8	; 248
 2ca:	f3 cf       	rjmp	.-26     	; 0x2b2 <__addsf3x+0x38>
 2cc:	46 95       	lsr	r20
 2ce:	37 95       	ror	r19
 2d0:	27 95       	ror	r18
 2d2:	a7 95       	ror	r26
 2d4:	f0 40       	sbci	r31, 0x00	; 0
 2d6:	53 95       	inc	r21
 2d8:	c9 f7       	brne	.-14     	; 0x2cc <__addsf3x+0x52>
 2da:	7e f4       	brtc	.+30     	; 0x2fa <__addsf3x+0x80>
 2dc:	1f 16       	cp	r1, r31
 2de:	ba 0b       	sbc	r27, r26
 2e0:	62 0b       	sbc	r22, r18
 2e2:	73 0b       	sbc	r23, r19
 2e4:	84 0b       	sbc	r24, r20
 2e6:	ba f0       	brmi	.+46     	; 0x316 <__addsf3x+0x9c>
 2e8:	91 50       	subi	r25, 0x01	; 1
 2ea:	a1 f0       	breq	.+40     	; 0x314 <__addsf3x+0x9a>
 2ec:	ff 0f       	add	r31, r31
 2ee:	bb 1f       	adc	r27, r27
 2f0:	66 1f       	adc	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	88 1f       	adc	r24, r24
 2f6:	c2 f7       	brpl	.-16     	; 0x2e8 <__addsf3x+0x6e>
 2f8:	0e c0       	rjmp	.+28     	; 0x316 <__addsf3x+0x9c>
 2fa:	ba 0f       	add	r27, r26
 2fc:	62 1f       	adc	r22, r18
 2fe:	73 1f       	adc	r23, r19
 300:	84 1f       	adc	r24, r20
 302:	48 f4       	brcc	.+18     	; 0x316 <__addsf3x+0x9c>
 304:	87 95       	ror	r24
 306:	77 95       	ror	r23
 308:	67 95       	ror	r22
 30a:	b7 95       	ror	r27
 30c:	f7 95       	ror	r31
 30e:	9e 3f       	cpi	r25, 0xFE	; 254
 310:	08 f0       	brcs	.+2      	; 0x314 <__addsf3x+0x9a>
 312:	b0 cf       	rjmp	.-160    	; 0x274 <__addsf3+0x28>
 314:	93 95       	inc	r25
 316:	88 0f       	add	r24, r24
 318:	08 f0       	brcs	.+2      	; 0x31c <__addsf3x+0xa2>
 31a:	99 27       	eor	r25, r25
 31c:	ee 0f       	add	r30, r30
 31e:	97 95       	ror	r25
 320:	87 95       	ror	r24
 322:	08 95       	ret

00000324 <__floatunsisf>:
 324:	e8 94       	clt
 326:	09 c0       	rjmp	.+18     	; 0x33a <__floatsisf+0x12>

00000328 <__floatsisf>:
 328:	97 fb       	bst	r25, 7
 32a:	3e f4       	brtc	.+14     	; 0x33a <__floatsisf+0x12>
 32c:	90 95       	com	r25
 32e:	80 95       	com	r24
 330:	70 95       	com	r23
 332:	61 95       	neg	r22
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	8f 4f       	sbci	r24, 0xFF	; 255
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	99 23       	and	r25, r25
 33c:	a9 f0       	breq	.+42     	; 0x368 <__floatsisf+0x40>
 33e:	f9 2f       	mov	r31, r25
 340:	96 e9       	ldi	r25, 0x96	; 150
 342:	bb 27       	eor	r27, r27
 344:	93 95       	inc	r25
 346:	f6 95       	lsr	r31
 348:	87 95       	ror	r24
 34a:	77 95       	ror	r23
 34c:	67 95       	ror	r22
 34e:	b7 95       	ror	r27
 350:	f1 11       	cpse	r31, r1
 352:	f8 cf       	rjmp	.-16     	; 0x344 <__floatsisf+0x1c>
 354:	fa f4       	brpl	.+62     	; 0x394 <__floatsisf+0x6c>
 356:	bb 0f       	add	r27, r27
 358:	11 f4       	brne	.+4      	; 0x35e <__floatsisf+0x36>
 35a:	60 ff       	sbrs	r22, 0
 35c:	1b c0       	rjmp	.+54     	; 0x394 <__floatsisf+0x6c>
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	8f 4f       	sbci	r24, 0xFF	; 255
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	16 c0       	rjmp	.+44     	; 0x394 <__floatsisf+0x6c>
 368:	88 23       	and	r24, r24
 36a:	11 f0       	breq	.+4      	; 0x370 <__floatsisf+0x48>
 36c:	96 e9       	ldi	r25, 0x96	; 150
 36e:	11 c0       	rjmp	.+34     	; 0x392 <__floatsisf+0x6a>
 370:	77 23       	and	r23, r23
 372:	21 f0       	breq	.+8      	; 0x37c <__floatsisf+0x54>
 374:	9e e8       	ldi	r25, 0x8E	; 142
 376:	87 2f       	mov	r24, r23
 378:	76 2f       	mov	r23, r22
 37a:	05 c0       	rjmp	.+10     	; 0x386 <__floatsisf+0x5e>
 37c:	66 23       	and	r22, r22
 37e:	71 f0       	breq	.+28     	; 0x39c <__floatsisf+0x74>
 380:	96 e8       	ldi	r25, 0x86	; 134
 382:	86 2f       	mov	r24, r22
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	2a f0       	brmi	.+10     	; 0x394 <__floatsisf+0x6c>
 38a:	9a 95       	dec	r25
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	da f7       	brpl	.-10     	; 0x38a <__floatsisf+0x62>
 394:	88 0f       	add	r24, r24
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	97 f9       	bld	r25, 7
 39c:	08 95       	ret

0000039e <__fp_inf>:
 39e:	97 f9       	bld	r25, 7
 3a0:	9f 67       	ori	r25, 0x7F	; 127
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	08 95       	ret

000003aa <__fp_nan>:
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	80 ec       	ldi	r24, 0xC0	; 192
 3ae:	08 95       	ret

000003b0 <__fp_pscA>:
 3b0:	00 24       	eor	r0, r0
 3b2:	0a 94       	dec	r0
 3b4:	16 16       	cp	r1, r22
 3b6:	17 06       	cpc	r1, r23
 3b8:	18 06       	cpc	r1, r24
 3ba:	09 06       	cpc	r0, r25
 3bc:	08 95       	ret

000003be <__fp_pscB>:
 3be:	00 24       	eor	r0, r0
 3c0:	0a 94       	dec	r0
 3c2:	12 16       	cp	r1, r18
 3c4:	13 06       	cpc	r1, r19
 3c6:	14 06       	cpc	r1, r20
 3c8:	05 06       	cpc	r0, r21
 3ca:	08 95       	ret

000003cc <__fp_round>:
 3cc:	09 2e       	mov	r0, r25
 3ce:	03 94       	inc	r0
 3d0:	00 0c       	add	r0, r0
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <__fp_round+0xc>
 3d4:	88 23       	and	r24, r24
 3d6:	52 f0       	brmi	.+20     	; 0x3ec <__fp_round+0x20>
 3d8:	bb 0f       	add	r27, r27
 3da:	40 f4       	brcc	.+16     	; 0x3ec <__fp_round+0x20>
 3dc:	bf 2b       	or	r27, r31
 3de:	11 f4       	brne	.+4      	; 0x3e4 <__fp_round+0x18>
 3e0:	60 ff       	sbrs	r22, 0
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <__fp_round+0x20>
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	08 95       	ret

000003ee <__fp_split3>:
 3ee:	57 fd       	sbrc	r21, 7
 3f0:	90 58       	subi	r25, 0x80	; 128
 3f2:	44 0f       	add	r20, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	59 f0       	breq	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f8:	5f 3f       	cpi	r21, 0xFF	; 255
 3fa:	71 f0       	breq	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fc:	47 95       	ror	r20

000003fe <__fp_splitA>:
 3fe:	88 0f       	add	r24, r24
 400:	97 fb       	bst	r25, 7
 402:	99 1f       	adc	r25, r25
 404:	61 f0       	breq	.+24     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 406:	9f 3f       	cpi	r25, 0xFF	; 255
 408:	79 f0       	breq	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40a:	87 95       	ror	r24
 40c:	08 95       	ret
 40e:	12 16       	cp	r1, r18
 410:	13 06       	cpc	r1, r19
 412:	14 06       	cpc	r1, r20
 414:	55 1f       	adc	r21, r21
 416:	f2 cf       	rjmp	.-28     	; 0x3fc <__fp_split3+0xe>
 418:	46 95       	lsr	r20
 41a:	f1 df       	rcall	.-30     	; 0x3fe <__fp_splitA>
 41c:	08 c0       	rjmp	.+16     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 41e:	16 16       	cp	r1, r22
 420:	17 06       	cpc	r1, r23
 422:	18 06       	cpc	r1, r24
 424:	99 1f       	adc	r25, r25
 426:	f1 cf       	rjmp	.-30     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 428:	86 95       	lsr	r24
 42a:	71 05       	cpc	r23, r1
 42c:	61 05       	cpc	r22, r1
 42e:	08 94       	sec
 430:	08 95       	ret

00000432 <__fp_zero>:
 432:	e8 94       	clt

00000434 <__fp_szero>:
 434:	bb 27       	eor	r27, r27
 436:	66 27       	eor	r22, r22
 438:	77 27       	eor	r23, r23
 43a:	cb 01       	movw	r24, r22
 43c:	97 f9       	bld	r25, 7
 43e:	08 95       	ret

00000440 <__mulsf3>:
 440:	0e 94 33 02 	call	0x466	; 0x466 <__mulsf3x>
 444:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_round>
 448:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fp_pscA>
 44c:	38 f0       	brcs	.+14     	; 0x45c <__mulsf3+0x1c>
 44e:	0e 94 df 01 	call	0x3be	; 0x3be <__fp_pscB>
 452:	20 f0       	brcs	.+8      	; 0x45c <__mulsf3+0x1c>
 454:	95 23       	and	r25, r21
 456:	11 f0       	breq	.+4      	; 0x45c <__mulsf3+0x1c>
 458:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_inf>
 45c:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__fp_nan>
 460:	11 24       	eor	r1, r1
 462:	0c 94 1a 02 	jmp	0x434	; 0x434 <__fp_szero>

00000466 <__mulsf3x>:
 466:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__fp_split3>
 46a:	70 f3       	brcs	.-36     	; 0x448 <__mulsf3+0x8>

0000046c <__mulsf3_pse>:
 46c:	95 9f       	mul	r25, r21
 46e:	c1 f3       	breq	.-16     	; 0x460 <__mulsf3+0x20>
 470:	95 0f       	add	r25, r21
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	55 1f       	adc	r21, r21
 476:	62 9f       	mul	r22, r18
 478:	f0 01       	movw	r30, r0
 47a:	72 9f       	mul	r23, r18
 47c:	bb 27       	eor	r27, r27
 47e:	f0 0d       	add	r31, r0
 480:	b1 1d       	adc	r27, r1
 482:	63 9f       	mul	r22, r19
 484:	aa 27       	eor	r26, r26
 486:	f0 0d       	add	r31, r0
 488:	b1 1d       	adc	r27, r1
 48a:	aa 1f       	adc	r26, r26
 48c:	64 9f       	mul	r22, r20
 48e:	66 27       	eor	r22, r22
 490:	b0 0d       	add	r27, r0
 492:	a1 1d       	adc	r26, r1
 494:	66 1f       	adc	r22, r22
 496:	82 9f       	mul	r24, r18
 498:	22 27       	eor	r18, r18
 49a:	b0 0d       	add	r27, r0
 49c:	a1 1d       	adc	r26, r1
 49e:	62 1f       	adc	r22, r18
 4a0:	73 9f       	mul	r23, r19
 4a2:	b0 0d       	add	r27, r0
 4a4:	a1 1d       	adc	r26, r1
 4a6:	62 1f       	adc	r22, r18
 4a8:	83 9f       	mul	r24, r19
 4aa:	a0 0d       	add	r26, r0
 4ac:	61 1d       	adc	r22, r1
 4ae:	22 1f       	adc	r18, r18
 4b0:	74 9f       	mul	r23, r20
 4b2:	33 27       	eor	r19, r19
 4b4:	a0 0d       	add	r26, r0
 4b6:	61 1d       	adc	r22, r1
 4b8:	23 1f       	adc	r18, r19
 4ba:	84 9f       	mul	r24, r20
 4bc:	60 0d       	add	r22, r0
 4be:	21 1d       	adc	r18, r1
 4c0:	82 2f       	mov	r24, r18
 4c2:	76 2f       	mov	r23, r22
 4c4:	6a 2f       	mov	r22, r26
 4c6:	11 24       	eor	r1, r1
 4c8:	9f 57       	subi	r25, 0x7F	; 127
 4ca:	50 40       	sbci	r21, 0x00	; 0
 4cc:	9a f0       	brmi	.+38     	; 0x4f4 <__mulsf3_pse+0x88>
 4ce:	f1 f0       	breq	.+60     	; 0x50c <__mulsf3_pse+0xa0>
 4d0:	88 23       	and	r24, r24
 4d2:	4a f0       	brmi	.+18     	; 0x4e6 <__mulsf3_pse+0x7a>
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	bb 1f       	adc	r27, r27
 4da:	66 1f       	adc	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	88 1f       	adc	r24, r24
 4e0:	91 50       	subi	r25, 0x01	; 1
 4e2:	50 40       	sbci	r21, 0x00	; 0
 4e4:	a9 f7       	brne	.-22     	; 0x4d0 <__mulsf3_pse+0x64>
 4e6:	9e 3f       	cpi	r25, 0xFE	; 254
 4e8:	51 05       	cpc	r21, r1
 4ea:	80 f0       	brcs	.+32     	; 0x50c <__mulsf3_pse+0xa0>
 4ec:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_inf>
 4f0:	0c 94 1a 02 	jmp	0x434	; 0x434 <__fp_szero>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	e4 f3       	brlt	.-8      	; 0x4f0 <__mulsf3_pse+0x84>
 4f8:	98 3e       	cpi	r25, 0xE8	; 232
 4fa:	d4 f3       	brlt	.-12     	; 0x4f0 <__mulsf3_pse+0x84>
 4fc:	86 95       	lsr	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b7 95       	ror	r27
 504:	f7 95       	ror	r31
 506:	e7 95       	ror	r30
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	c1 f7       	brne	.-16     	; 0x4fc <__mulsf3_pse+0x90>
 50c:	fe 2b       	or	r31, r30
 50e:	88 0f       	add	r24, r24
 510:	91 1d       	adc	r25, r1
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	97 f9       	bld	r25, 7
 518:	08 95       	ret

0000051a <_exit>:
 51a:	f8 94       	cli

0000051c <__stop_program>:
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stop_program>
