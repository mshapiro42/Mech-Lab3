
Mech-Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000638  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000638  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c25  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000913  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000702  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000404  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002e0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  9e:	0c 94 1a 03 	jmp	0x634	; 0x634 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <avr/io.h>
#include "ADC.h"

void adc_init() {	
	//Set reference to built in channels
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Enable ADC w/ prescaler
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  b2:	08 95       	ret

000000b4 <adc_read>:
}

uint16_t adc_read(uint8_t ch) {
	//select channel to read
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	//start conversion
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
  cc:	80 81       	ld	r24, Z
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <adc_read+0x18>
	//return result
	return (ADC);
  d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  da:	08 95       	ret

000000dc <USART_Init>:
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		while(!(NEW_MSG)); //wait for new byte
		a.asChar[i] = receive_byte(); //collect byte
	}
	return a.asFloat; //return float value
}
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  f0:	08 95       	ret

000000f2 <print_byte>:

void print_byte(uint8_t value){
	//while(!(UCSR0A & (1<<UDRE0)));
	while(!(TRANSMIT_READY)); //after transmit line is ready
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <print_byte+0x4>
	UDR0 = value; //set transmit register to value
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 100:	08 95       	ret

00000102 <print_float>:
}

void print_float(float value){ 
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <print_float+0xe>
 110:	00 d0       	rcall	.+0      	; 0x112 <print_float+0x10>
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
 116:	69 83       	std	Y+1, r22	; 0x01
 118:	7a 83       	std	Y+2, r23	; 0x02
 11a:	8b 83       	std	Y+3, r24	; 0x03
 11c:	9c 83       	std	Y+4, r25	; 0x04
 11e:	8e 01       	movw	r16, r28
 120:	0f 5f       	subi	r16, 0xFF	; 255
 122:	1f 4f       	sbci	r17, 0xFF	; 255
 124:	7e 01       	movw	r14, r28
 126:	85 e0       	ldi	r24, 0x05	; 5
 128:	e8 0e       	add	r14, r24
 12a:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		print_byte(b.asChar[i]); //send each byte
 12c:	f8 01       	movw	r30, r16
 12e:	81 91       	ld	r24, Z+
 130:	8f 01       	movw	r16, r30
 132:	0e 94 79 00 	call	0xf2	; 0xf2 <print_byte>
}

void print_float(float value){ 
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
 136:	0e 15       	cp	r16, r14
 138:	1f 05       	cpc	r17, r15
 13a:	c1 f7       	brne	.-16     	; 0x12c <print_float+0x2a>
		print_byte(b.asChar[i]); //send each byte
	}
}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	08 95       	ret

00000152 <fastPWM_init>:
}

void fastPWM_init()
{
	// set Fast PWM mode on Timer 2
	TCCR2A |= (1 << WGM20)|(1 << WGM21);
 152:	e0 eb       	ldi	r30, 0xB0	; 176
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	83 60       	ori	r24, 0x03	; 3
 15a:	80 83       	st	Z, r24
	TCCR2B |= (1 << WGM22);
 15c:	e1 eb       	ldi	r30, 0xB1	; 177
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 60       	ori	r24, 0x08	; 8
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <main>:
	float asFloat;
	char asChars[4];
};*/

int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	6e 97       	sbiw	r28, 0x1e	; 30
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
	//struct Ring_Buffer_C output_queue;
	USART_Init(MYUBRR);
 17c:	87 e6       	ldi	r24, 0x67	; 103
 17e:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_Init>
    //rb_initialize_C(&output_queue);

	timer0_init(1024,155);
 182:	6b e9       	ldi	r22, 0x9B	; 155
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	0e 94 4e 01 	call	0x29c	; 0x29c <timer0_init>
	timer1_init(0,15999);
 18e:	6f e7       	ldi	r22, 0x7F	; 127
 190:	7e e3       	ldi	r23, 0x3E	; 62
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 78 01 	call	0x2f0	; 0x2f0 <timer1_init>
	fastPWM_init();
 19a:	0e 94 a9 00 	call	0x152	; 0x152 <fastPWM_init>
	adc_init();
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	//digital_filter_init(0);
	
	//Set AI0 to Output and rest as Input
	DDRC |= 0b00000001;
 1a2:	38 9a       	sbi	0x07, 0	; 7
	
	//Set output to 1 to power sensor
	PORTC |= 0b00000001;
 1a4:	40 9a       	sbi	0x08, 0	; 8
	//union floatChars printVal;
	//int vel_des[3] = [24, 0, -24];
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
	//enum State {stateCur, stateLast};
	enum states{STOP = 0, CW = 1, CCW = 2} stateCur = STOP, stateLast = CW;
	float convertCoeff[] = {-354.5305, 7.2116, -0.0543, 1.9698E-4, -3.5356E-7, 3.0609E-10, -1.0193E-13};
 1a6:	8c e1       	ldi	r24, 0x1C	; 28
 1a8:	e0 e0       	ldi	r30, 0x00	; 0
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	de 01       	movw	r26, r28
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x48>
	//float filteredVel = 0;
	//union floatChars printVal;
	//int vel_des[3] = [24, 0, -24];
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
	//enum State {stateCur, stateLast};
	enum states{STOP = 0, CW = 1, CCW = 2} stateCur = STOP, stateLast = CW;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	8e 8f       	std	Y+30, r24	; 0x1e
 1bc:	1d 8e       	std	Y+29, r1	; 0x1d
	//float angPosLast = 0;
	//float angVel = 0;
	//float filteredVel = 0;
	//union floatChars printVal;
	//int vel_des[3] = [24, 0, -24];
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
 1be:	81 2c       	mov	r8, r1
 1c0:	91 2c       	mov	r9, r1
	PORTC |= 0b00000001;
	
	//Sampling frequency for converting to velocity, 1/0.001
	//float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
 1c2:	41 2c       	mov	r4, r1
 1c4:	51 2c       	mov	r5, r1
 1c6:	32 01       	movw	r6, r4
	float tempSum;

    while (1) 
    {
		//if TIMER2 reaches max, probably a better way to do this, worried this will get missed
		if(TCNT2 == 255) 
 1c8:	0f 2e       	mov	r0, r31
 1ca:	f2 eb       	ldi	r31, 0xB2	; 178
 1cc:	2f 2e       	mov	r2, r31
 1ce:	31 2c       	mov	r3, r1
 1d0:	f0 2d       	mov	r31, r0
 1d2:	5e 01       	movw	r10, r28
 1d4:	9d e1       	ldi	r25, 0x1D	; 29
 1d6:	a9 0e       	add	r10, r25
 1d8:	b1 1c       	adc	r11, r1
 1da:	f1 01       	movw	r30, r2
 1dc:	80 81       	ld	r24, Z
 1de:	8f 3f       	cpi	r24, 0xFF	; 255
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0x7c>
		{
			//Reset Flag
			TIFR2 |= (1 << OCF2A);
 1e2:	b9 9a       	sbi	0x17, 1	; 23
		}
		//if TIMER0_flag
		if(TIFR0 & (1 << OCF0A))
 1e4:	a9 9b       	sbis	0x15, 1	; 21
 1e6:	28 c0       	rjmp	.+80     	; 0x238 <main+0xd0>
		{
			timer0Count++;
 1e8:	ff ef       	ldi	r31, 0xFF	; 255
 1ea:	8f 1a       	sub	r8, r31
 1ec:	9f 0a       	sbc	r9, r31
			if(timer0Count == 10)
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	88 16       	cp	r8, r24
 1f2:	91 04       	cpc	r9, r1
 1f4:	e1 f4       	brne	.+56     	; 0x22e <main+0xc6>
			{
				// 0 means stop, 1 means CW, 2 means CCW
				if(stateCur == 0 && stateLast == 1)
 1f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
 1f8:	91 11       	cpse	r25, r1
 1fa:	0d c0       	rjmp	.+26     	; 0x216 <main+0xae>
 1fc:	ee 8d       	ldd	r30, Y+30	; 0x1e
 1fe:	e1 30       	cpi	r30, 0x01	; 1
 200:	81 f0       	breq	.+32     	; 0x222 <main+0xba>
				{
					stateLast = stateCur;
					stateCur = CCW;
					//set newPWM with vel_des[2]
				} else if(stateCur == 0 && stateLast == 2)
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	e2 30       	cpi	r30, 0x02	; 2
 206:	09 f0       	breq	.+2      	; 0x20a <main+0xa2>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 20c:	fe 8f       	std	Y+30, r31	; 0x1e
					stateCur = CW;
					//set new PWM with vel_des[0]
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
 20e:	8d 8f       	std	Y+29, r24	; 0x1d
					//set new PWM with vel_des[1]
				}
				timer0Count = 0;
 210:	81 2c       	mov	r8, r1
 212:	91 2c       	mov	r9, r1
 214:	0c c0       	rjmp	.+24     	; 0x22e <main+0xc6>
 216:	8d 8d       	ldd	r24, Y+29	; 0x1d
 218:	8e 8f       	std	Y+30, r24	; 0x1e
					stateCur = CW;
					//set new PWM with vel_des[0]
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
 21a:	1d 8e       	std	Y+29, r1	; 0x1d
					//set new PWM with vel_des[1]
				}
				timer0Count = 0;
 21c:	81 2c       	mov	r8, r1
 21e:	91 2c       	mov	r9, r1
 220:	06 c0       	rjmp	.+12     	; 0x22e <main+0xc6>
 222:	9d 8d       	ldd	r25, Y+29	; 0x1d
 224:	9e 8f       	std	Y+30, r25	; 0x1e
			{
				// 0 means stop, 1 means CW, 2 means CCW
				if(stateCur == 0 && stateLast == 1)
				{
					stateLast = stateCur;
					stateCur = CCW;
 226:	e2 e0       	ldi	r30, 0x02	; 2
 228:	ed 8f       	std	Y+29, r30	; 0x1d
				{
					stateLast = stateCur;
					stateCur = STOP;
					//set new PWM with vel_des[1]
				}
				timer0Count = 0;
 22a:	81 2c       	mov	r8, r1
 22c:	91 2c       	mov	r9, r1
			/*printVal.asFloat = 500; //edit so we don't drop readings during prints
			printVal.asFloat = angPos;
			for(int i = 0; i < 4; i ++){
				rb_push_back_C(&output_queue, printVal.asChars[i]);
			}*/
			print_float(angPos);
 22e:	c3 01       	movw	r24, r6
 230:	b2 01       	movw	r22, r4
 232:	0e 94 81 00 	call	0x102	; 0x102 <print_float>
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 236:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if(TIFR1 & (1 << OCF1A))
 238:	b1 9b       	sbis	0x16, 1	; 22
 23a:	cf cf       	rjmp	.-98     	; 0x1da <main+0x72>
		{
			//read voltage 
			volt = adc_read(1);	
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 242:	bc 01       	movw	r22, r24
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 1f 02 	call	0x43e	; 0x43e <__floatunsisf>
 24c:	6b 01       	movw	r12, r22
 24e:	7c 01       	movw	r14, r24
			
			//convert to position in radians
			tempSum = convertCoeff[0];
 250:	49 80       	ldd	r4, Y+1	; 0x01
 252:	5a 80       	ldd	r5, Y+2	; 0x02
 254:	6b 80       	ldd	r6, Y+3	; 0x03
 256:	7c 80       	ldd	r7, Y+4	; 0x04
 258:	8e 01       	movw	r16, r28
 25a:	0b 5f       	subi	r16, 0xFB	; 251
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
				tempSum += convertCoeff[i]*volt;
 25e:	f8 01       	movw	r30, r16
 260:	61 91       	ld	r22, Z+
 262:	71 91       	ld	r23, Z+
 264:	81 91       	ld	r24, Z+
 266:	91 91       	ld	r25, Z+
 268:	8f 01       	movw	r16, r30
 26a:	a7 01       	movw	r20, r14
 26c:	96 01       	movw	r18, r12
 26e:	0e 94 ad 02 	call	0x55a	; 0x55a <__mulsf3>
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	c3 01       	movw	r24, r6
 278:	b2 01       	movw	r22, r4
 27a:	0e 94 b3 01 	call	0x366	; 0x366 <__addsf3>
 27e:	2b 01       	movw	r4, r22
 280:	3c 01       	movw	r6, r24
				volt *= volt;
 282:	a7 01       	movw	r20, r14
 284:	96 01       	movw	r18, r12
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	0e 94 ad 02 	call	0x55a	; 0x55a <__mulsf3>
 28e:	6b 01       	movw	r12, r22
 290:	7c 01       	movw	r14, r24
			volt = adc_read(1);	
			
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
 292:	0a 15       	cp	r16, r10
 294:	1b 05       	cpc	r17, r11
 296:	19 f7       	brne	.-58     	; 0x25e <main+0xf6>
			
			//filter velocity
			//filteredVel = filterValue(angVel);
			
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 298:	b1 9a       	sbi	0x16, 1	; 22
 29a:	9f cf       	rjmp	.-194    	; 0x1da <main+0x72>

0000029c <timer0_init>:
#include <avr/io.h>
#include "Timers.h"

void timer0_init(int prescaler,int compVal)
{
 29c:	9c 01       	movw	r18, r24
	// enable CTC for Timer0
	TCCR0A |= (1 << WGM01);
 29e:	94 b5       	in	r25, 0x24	; 36
 2a0:	92 60       	ori	r25, 0x02	; 2
 2a2:	94 bd       	out	0x24, r25	; 36
	// set appropriate prescaler
	if(prescaler == 0){
 2a4:	21 15       	cp	r18, r1
 2a6:	31 05       	cpc	r19, r1
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <timer0_init+0x16>
		TCCR0B |= (1 << CS00);
 2aa:	85 b5       	in	r24, 0x25	; 37
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	85 bd       	out	0x25, r24	; 37
 2b0:	0e c0       	rjmp	.+28     	; 0x2ce <timer0_init+0x32>
	} 
	if(prescaler == 8){
 2b2:	28 30       	cpi	r18, 0x08	; 8
 2b4:	31 05       	cpc	r19, r1
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <timer0_init+0x24>
		TCCR0B |= (1 << CS01);
 2b8:	85 b5       	in	r24, 0x25	; 37
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	85 bd       	out	0x25, r24	; 37
 2be:	0f c0       	rjmp	.+30     	; 0x2de <timer0_init+0x42>
	} 
	if(prescaler == 64){
 2c0:	20 34       	cpi	r18, 0x40	; 64
 2c2:	31 05       	cpc	r19, r1
 2c4:	21 f4       	brne	.+8      	; 0x2ce <timer0_init+0x32>
		TCCR0B |= (1 << CS00)|(1 << CS01);
 2c6:	85 b5       	in	r24, 0x25	; 37
 2c8:	83 60       	ori	r24, 0x03	; 3
 2ca:	85 bd       	out	0x25, r24	; 37
 2cc:	0e c0       	rjmp	.+28     	; 0x2ea <timer0_init+0x4e>
	} 
	if(prescaler == 256){
 2ce:	21 15       	cp	r18, r1
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	38 07       	cpc	r19, r24
 2d4:	21 f4       	brne	.+8      	; 0x2de <timer0_init+0x42>
		TCCR0B |= (1 << CS02);
 2d6:	85 b5       	in	r24, 0x25	; 37
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	85 bd       	out	0x25, r24	; 37
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <timer0_init+0x4e>
	} 
	if(prescaler == 1024){
 2de:	21 15       	cp	r18, r1
 2e0:	34 40       	sbci	r19, 0x04	; 4
 2e2:	19 f4       	brne	.+6      	; 0x2ea <timer0_init+0x4e>
		TCCR0B |= (1 << CS02)|(1 << CS00);
 2e4:	85 b5       	in	r24, 0x25	; 37
 2e6:	85 60       	ori	r24, 0x05	; 5
 2e8:	85 bd       	out	0x25, r24	; 37
	} 
	// initialize counter to zero
	TCNT0 = 0;
 2ea:	16 bc       	out	0x26, r1	; 38
	// initialize compare value for CTC
	OCR0A = compVal;
 2ec:	67 bd       	out	0x27, r22	; 39
 2ee:	08 95       	ret

000002f0 <timer1_init>:
}

void timer1_init(int prescaler,int compVal)
{
 2f0:	9c 01       	movw	r18, r24
	// enable CTC for Timer1
	TCCR0B |= (1 << WGM12);
 2f2:	95 b5       	in	r25, 0x25	; 37
 2f4:	98 60       	ori	r25, 0x08	; 8
 2f6:	95 bd       	out	0x25, r25	; 37
	// set appropriate prescaler
	if(prescaler == 0){
 2f8:	21 15       	cp	r18, r1
 2fa:	31 05       	cpc	r19, r1
 2fc:	31 f4       	brne	.+12     	; 0x30a <timer1_init+0x1a>
		TCCR1B |= (1 << CS10);
 2fe:	e1 e8       	ldi	r30, 0x81	; 129
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	81 60       	ori	r24, 0x01	; 1
 306:	80 83       	st	Z, r24
 308:	12 c0       	rjmp	.+36     	; 0x32e <timer1_init+0x3e>
	} 
	if(prescaler == 8){
 30a:	28 30       	cpi	r18, 0x08	; 8
 30c:	31 05       	cpc	r19, r1
 30e:	31 f4       	brne	.+12     	; 0x31c <timer1_init+0x2c>
		TCCR1B |= (1 << CS11);
 310:	e1 e8       	ldi	r30, 0x81	; 129
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	82 60       	ori	r24, 0x02	; 2
 318:	80 83       	st	Z, r24
 31a:	13 c0       	rjmp	.+38     	; 0x342 <timer1_init+0x52>
	} 
	if(prescaler == 64){
 31c:	20 34       	cpi	r18, 0x40	; 64
 31e:	31 05       	cpc	r19, r1
 320:	31 f4       	brne	.+12     	; 0x32e <timer1_init+0x3e>
		TCCR1B |= (1 << CS11)|(1 << CS10);
 322:	e1 e8       	ldi	r30, 0x81	; 129
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	83 60       	ori	r24, 0x03	; 3
 32a:	80 83       	st	Z, r24
 32c:	12 c0       	rjmp	.+36     	; 0x352 <timer1_init+0x62>
	} 
	if(prescaler == 256){
 32e:	21 15       	cp	r18, r1
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	38 07       	cpc	r19, r24
 334:	31 f4       	brne	.+12     	; 0x342 <timer1_init+0x52>
		TCCR1B |= (1 << CS12);
 336:	e1 e8       	ldi	r30, 0x81	; 129
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	84 60       	ori	r24, 0x04	; 4
 33e:	80 83       	st	Z, r24
 340:	08 c0       	rjmp	.+16     	; 0x352 <timer1_init+0x62>
	} 
	if(prescaler == 1024){
 342:	21 15       	cp	r18, r1
 344:	34 40       	sbci	r19, 0x04	; 4
 346:	29 f4       	brne	.+10     	; 0x352 <timer1_init+0x62>
		TCCR1B |= (1 << CS10)|(1 << CS12);
 348:	e1 e8       	ldi	r30, 0x81	; 129
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	85 60       	ori	r24, 0x05	; 5
 350:	80 83       	st	Z, r24
	}
	// initialize counter to zero
	TCNT1 = 0;
 352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// initialize compare value
	OCR1A = compVal;
 35a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 35e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 362:	08 95       	ret

00000364 <__subsf3>:
 364:	50 58       	subi	r21, 0x80	; 128

00000366 <__addsf3>:
 366:	bb 27       	eor	r27, r27
 368:	aa 27       	eor	r26, r26
 36a:	0e 94 ca 01 	call	0x394	; 0x394 <__addsf3x>
 36e:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_round>
 372:	0e 94 65 02 	call	0x4ca	; 0x4ca <__fp_pscA>
 376:	38 f0       	brcs	.+14     	; 0x386 <__addsf3+0x20>
 378:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fp_pscB>
 37c:	20 f0       	brcs	.+8      	; 0x386 <__addsf3+0x20>
 37e:	39 f4       	brne	.+14     	; 0x38e <__addsf3+0x28>
 380:	9f 3f       	cpi	r25, 0xFF	; 255
 382:	19 f4       	brne	.+6      	; 0x38a <__addsf3+0x24>
 384:	26 f4       	brtc	.+8      	; 0x38e <__addsf3+0x28>
 386:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_nan>
 38a:	0e f4       	brtc	.+2      	; 0x38e <__addsf3+0x28>
 38c:	e0 95       	com	r30
 38e:	e7 fb       	bst	r30, 7
 390:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__fp_inf>

00000394 <__addsf3x>:
 394:	e9 2f       	mov	r30, r25
 396:	0e 94 84 02 	call	0x508	; 0x508 <__fp_split3>
 39a:	58 f3       	brcs	.-42     	; 0x372 <__addsf3+0xc>
 39c:	ba 17       	cp	r27, r26
 39e:	62 07       	cpc	r22, r18
 3a0:	73 07       	cpc	r23, r19
 3a2:	84 07       	cpc	r24, r20
 3a4:	95 07       	cpc	r25, r21
 3a6:	20 f0       	brcs	.+8      	; 0x3b0 <__addsf3x+0x1c>
 3a8:	79 f4       	brne	.+30     	; 0x3c8 <__addsf3x+0x34>
 3aa:	a6 f5       	brtc	.+104    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ac:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_zero>
 3b0:	0e f4       	brtc	.+2      	; 0x3b4 <__addsf3x+0x20>
 3b2:	e0 95       	com	r30
 3b4:	0b 2e       	mov	r0, r27
 3b6:	ba 2f       	mov	r27, r26
 3b8:	a0 2d       	mov	r26, r0
 3ba:	0b 01       	movw	r0, r22
 3bc:	b9 01       	movw	r22, r18
 3be:	90 01       	movw	r18, r0
 3c0:	0c 01       	movw	r0, r24
 3c2:	ca 01       	movw	r24, r20
 3c4:	a0 01       	movw	r20, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	ff 27       	eor	r31, r31
 3ca:	59 1b       	sub	r21, r25
 3cc:	99 f0       	breq	.+38     	; 0x3f4 <__addsf3x+0x60>
 3ce:	59 3f       	cpi	r21, 0xF9	; 249
 3d0:	50 f4       	brcc	.+20     	; 0x3e6 <__addsf3x+0x52>
 3d2:	50 3e       	cpi	r21, 0xE0	; 224
 3d4:	68 f1       	brcs	.+90     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3d6:	1a 16       	cp	r1, r26
 3d8:	f0 40       	sbci	r31, 0x00	; 0
 3da:	a2 2f       	mov	r26, r18
 3dc:	23 2f       	mov	r18, r19
 3de:	34 2f       	mov	r19, r20
 3e0:	44 27       	eor	r20, r20
 3e2:	58 5f       	subi	r21, 0xF8	; 248
 3e4:	f3 cf       	rjmp	.-26     	; 0x3cc <__addsf3x+0x38>
 3e6:	46 95       	lsr	r20
 3e8:	37 95       	ror	r19
 3ea:	27 95       	ror	r18
 3ec:	a7 95       	ror	r26
 3ee:	f0 40       	sbci	r31, 0x00	; 0
 3f0:	53 95       	inc	r21
 3f2:	c9 f7       	brne	.-14     	; 0x3e6 <__addsf3x+0x52>
 3f4:	7e f4       	brtc	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f6:	1f 16       	cp	r1, r31
 3f8:	ba 0b       	sbc	r27, r26
 3fa:	62 0b       	sbc	r22, r18
 3fc:	73 0b       	sbc	r23, r19
 3fe:	84 0b       	sbc	r24, r20
 400:	ba f0       	brmi	.+46     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 402:	91 50       	subi	r25, 0x01	; 1
 404:	a1 f0       	breq	.+40     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 406:	ff 0f       	add	r31, r31
 408:	bb 1f       	adc	r27, r27
 40a:	66 1f       	adc	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	c2 f7       	brpl	.-16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 412:	0e c0       	rjmp	.+28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 414:	ba 0f       	add	r27, r26
 416:	62 1f       	adc	r22, r18
 418:	73 1f       	adc	r23, r19
 41a:	84 1f       	adc	r24, r20
 41c:	48 f4       	brcc	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41e:	87 95       	ror	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f7 95       	ror	r31
 428:	9e 3f       	cpi	r25, 0xFE	; 254
 42a:	08 f0       	brcs	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	b0 cf       	rjmp	.-160    	; 0x38e <__addsf3+0x28>
 42e:	93 95       	inc	r25
 430:	88 0f       	add	r24, r24
 432:	08 f0       	brcs	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	99 27       	eor	r25, r25
 436:	ee 0f       	add	r30, r30
 438:	97 95       	ror	r25
 43a:	87 95       	ror	r24
 43c:	08 95       	ret

0000043e <__floatunsisf>:
 43e:	e8 94       	clt
 440:	09 c0       	rjmp	.+18     	; 0x454 <__floatsisf+0x12>

00000442 <__floatsisf>:
 442:	97 fb       	bst	r25, 7
 444:	3e f4       	brtc	.+14     	; 0x454 <__floatsisf+0x12>
 446:	90 95       	com	r25
 448:	80 95       	com	r24
 44a:	70 95       	com	r23
 44c:	61 95       	neg	r22
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	8f 4f       	sbci	r24, 0xFF	; 255
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	99 23       	and	r25, r25
 456:	a9 f0       	breq	.+42     	; 0x482 <__floatsisf+0x40>
 458:	f9 2f       	mov	r31, r25
 45a:	96 e9       	ldi	r25, 0x96	; 150
 45c:	bb 27       	eor	r27, r27
 45e:	93 95       	inc	r25
 460:	f6 95       	lsr	r31
 462:	87 95       	ror	r24
 464:	77 95       	ror	r23
 466:	67 95       	ror	r22
 468:	b7 95       	ror	r27
 46a:	f1 11       	cpse	r31, r1
 46c:	f8 cf       	rjmp	.-16     	; 0x45e <__floatsisf+0x1c>
 46e:	fa f4       	brpl	.+62     	; 0x4ae <__floatsisf+0x6c>
 470:	bb 0f       	add	r27, r27
 472:	11 f4       	brne	.+4      	; 0x478 <__floatsisf+0x36>
 474:	60 ff       	sbrs	r22, 0
 476:	1b c0       	rjmp	.+54     	; 0x4ae <__floatsisf+0x6c>
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	16 c0       	rjmp	.+44     	; 0x4ae <__floatsisf+0x6c>
 482:	88 23       	and	r24, r24
 484:	11 f0       	breq	.+4      	; 0x48a <__floatsisf+0x48>
 486:	96 e9       	ldi	r25, 0x96	; 150
 488:	11 c0       	rjmp	.+34     	; 0x4ac <__floatsisf+0x6a>
 48a:	77 23       	and	r23, r23
 48c:	21 f0       	breq	.+8      	; 0x496 <__floatsisf+0x54>
 48e:	9e e8       	ldi	r25, 0x8E	; 142
 490:	87 2f       	mov	r24, r23
 492:	76 2f       	mov	r23, r22
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__floatsisf+0x5e>
 496:	66 23       	and	r22, r22
 498:	71 f0       	breq	.+28     	; 0x4b6 <__floatsisf+0x74>
 49a:	96 e8       	ldi	r25, 0x86	; 134
 49c:	86 2f       	mov	r24, r22
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	2a f0       	brmi	.+10     	; 0x4ae <__floatsisf+0x6c>
 4a4:	9a 95       	dec	r25
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	da f7       	brpl	.-10     	; 0x4a4 <__floatsisf+0x62>
 4ae:	88 0f       	add	r24, r24
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	97 f9       	bld	r25, 7
 4b6:	08 95       	ret

000004b8 <__fp_inf>:
 4b8:	97 f9       	bld	r25, 7
 4ba:	9f 67       	ori	r25, 0x7F	; 127
 4bc:	80 e8       	ldi	r24, 0x80	; 128
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	08 95       	ret

000004c4 <__fp_nan>:
 4c4:	9f ef       	ldi	r25, 0xFF	; 255
 4c6:	80 ec       	ldi	r24, 0xC0	; 192
 4c8:	08 95       	ret

000004ca <__fp_pscA>:
 4ca:	00 24       	eor	r0, r0
 4cc:	0a 94       	dec	r0
 4ce:	16 16       	cp	r1, r22
 4d0:	17 06       	cpc	r1, r23
 4d2:	18 06       	cpc	r1, r24
 4d4:	09 06       	cpc	r0, r25
 4d6:	08 95       	ret

000004d8 <__fp_pscB>:
 4d8:	00 24       	eor	r0, r0
 4da:	0a 94       	dec	r0
 4dc:	12 16       	cp	r1, r18
 4de:	13 06       	cpc	r1, r19
 4e0:	14 06       	cpc	r1, r20
 4e2:	05 06       	cpc	r0, r21
 4e4:	08 95       	ret

000004e6 <__fp_round>:
 4e6:	09 2e       	mov	r0, r25
 4e8:	03 94       	inc	r0
 4ea:	00 0c       	add	r0, r0
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__fp_round+0xc>
 4ee:	88 23       	and	r24, r24
 4f0:	52 f0       	brmi	.+20     	; 0x506 <__fp_round+0x20>
 4f2:	bb 0f       	add	r27, r27
 4f4:	40 f4       	brcc	.+16     	; 0x506 <__fp_round+0x20>
 4f6:	bf 2b       	or	r27, r31
 4f8:	11 f4       	brne	.+4      	; 0x4fe <__fp_round+0x18>
 4fa:	60 ff       	sbrs	r22, 0
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <__fp_round+0x20>
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	08 95       	ret

00000508 <__fp_split3>:
 508:	57 fd       	sbrc	r21, 7
 50a:	90 58       	subi	r25, 0x80	; 128
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	59 f0       	breq	.+22     	; 0x528 <__fp_splitA+0x10>
 512:	5f 3f       	cpi	r21, 0xFF	; 255
 514:	71 f0       	breq	.+28     	; 0x532 <__fp_splitA+0x1a>
 516:	47 95       	ror	r20

00000518 <__fp_splitA>:
 518:	88 0f       	add	r24, r24
 51a:	97 fb       	bst	r25, 7
 51c:	99 1f       	adc	r25, r25
 51e:	61 f0       	breq	.+24     	; 0x538 <__fp_splitA+0x20>
 520:	9f 3f       	cpi	r25, 0xFF	; 255
 522:	79 f0       	breq	.+30     	; 0x542 <__fp_splitA+0x2a>
 524:	87 95       	ror	r24
 526:	08 95       	ret
 528:	12 16       	cp	r1, r18
 52a:	13 06       	cpc	r1, r19
 52c:	14 06       	cpc	r1, r20
 52e:	55 1f       	adc	r21, r21
 530:	f2 cf       	rjmp	.-28     	; 0x516 <__fp_split3+0xe>
 532:	46 95       	lsr	r20
 534:	f1 df       	rcall	.-30     	; 0x518 <__fp_splitA>
 536:	08 c0       	rjmp	.+16     	; 0x548 <__fp_splitA+0x30>
 538:	16 16       	cp	r1, r22
 53a:	17 06       	cpc	r1, r23
 53c:	18 06       	cpc	r1, r24
 53e:	99 1f       	adc	r25, r25
 540:	f1 cf       	rjmp	.-30     	; 0x524 <__fp_splitA+0xc>
 542:	86 95       	lsr	r24
 544:	71 05       	cpc	r23, r1
 546:	61 05       	cpc	r22, r1
 548:	08 94       	sec
 54a:	08 95       	ret

0000054c <__fp_zero>:
 54c:	e8 94       	clt

0000054e <__fp_szero>:
 54e:	bb 27       	eor	r27, r27
 550:	66 27       	eor	r22, r22
 552:	77 27       	eor	r23, r23
 554:	cb 01       	movw	r24, r22
 556:	97 f9       	bld	r25, 7
 558:	08 95       	ret

0000055a <__mulsf3>:
 55a:	0e 94 c0 02 	call	0x580	; 0x580 <__mulsf3x>
 55e:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_round>
 562:	0e 94 65 02 	call	0x4ca	; 0x4ca <__fp_pscA>
 566:	38 f0       	brcs	.+14     	; 0x576 <__mulsf3+0x1c>
 568:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fp_pscB>
 56c:	20 f0       	brcs	.+8      	; 0x576 <__mulsf3+0x1c>
 56e:	95 23       	and	r25, r21
 570:	11 f0       	breq	.+4      	; 0x576 <__mulsf3+0x1c>
 572:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__fp_inf>
 576:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_nan>
 57a:	11 24       	eor	r1, r1
 57c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_szero>

00000580 <__mulsf3x>:
 580:	0e 94 84 02 	call	0x508	; 0x508 <__fp_split3>
 584:	70 f3       	brcs	.-36     	; 0x562 <__mulsf3+0x8>

00000586 <__mulsf3_pse>:
 586:	95 9f       	mul	r25, r21
 588:	c1 f3       	breq	.-16     	; 0x57a <__mulsf3+0x20>
 58a:	95 0f       	add	r25, r21
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	55 1f       	adc	r21, r21
 590:	62 9f       	mul	r22, r18
 592:	f0 01       	movw	r30, r0
 594:	72 9f       	mul	r23, r18
 596:	bb 27       	eor	r27, r27
 598:	f0 0d       	add	r31, r0
 59a:	b1 1d       	adc	r27, r1
 59c:	63 9f       	mul	r22, r19
 59e:	aa 27       	eor	r26, r26
 5a0:	f0 0d       	add	r31, r0
 5a2:	b1 1d       	adc	r27, r1
 5a4:	aa 1f       	adc	r26, r26
 5a6:	64 9f       	mul	r22, r20
 5a8:	66 27       	eor	r22, r22
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	66 1f       	adc	r22, r22
 5b0:	82 9f       	mul	r24, r18
 5b2:	22 27       	eor	r18, r18
 5b4:	b0 0d       	add	r27, r0
 5b6:	a1 1d       	adc	r26, r1
 5b8:	62 1f       	adc	r22, r18
 5ba:	73 9f       	mul	r23, r19
 5bc:	b0 0d       	add	r27, r0
 5be:	a1 1d       	adc	r26, r1
 5c0:	62 1f       	adc	r22, r18
 5c2:	83 9f       	mul	r24, r19
 5c4:	a0 0d       	add	r26, r0
 5c6:	61 1d       	adc	r22, r1
 5c8:	22 1f       	adc	r18, r18
 5ca:	74 9f       	mul	r23, r20
 5cc:	33 27       	eor	r19, r19
 5ce:	a0 0d       	add	r26, r0
 5d0:	61 1d       	adc	r22, r1
 5d2:	23 1f       	adc	r18, r19
 5d4:	84 9f       	mul	r24, r20
 5d6:	60 0d       	add	r22, r0
 5d8:	21 1d       	adc	r18, r1
 5da:	82 2f       	mov	r24, r18
 5dc:	76 2f       	mov	r23, r22
 5de:	6a 2f       	mov	r22, r26
 5e0:	11 24       	eor	r1, r1
 5e2:	9f 57       	subi	r25, 0x7F	; 127
 5e4:	50 40       	sbci	r21, 0x00	; 0
 5e6:	9a f0       	brmi	.+38     	; 0x60e <__mulsf3_pse+0x88>
 5e8:	f1 f0       	breq	.+60     	; 0x626 <__mulsf3_pse+0xa0>
 5ea:	88 23       	and	r24, r24
 5ec:	4a f0       	brmi	.+18     	; 0x600 <__mulsf3_pse+0x7a>
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	bb 1f       	adc	r27, r27
 5f4:	66 1f       	adc	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	91 50       	subi	r25, 0x01	; 1
 5fc:	50 40       	sbci	r21, 0x00	; 0
 5fe:	a9 f7       	brne	.-22     	; 0x5ea <__mulsf3_pse+0x64>
 600:	9e 3f       	cpi	r25, 0xFE	; 254
 602:	51 05       	cpc	r21, r1
 604:	80 f0       	brcs	.+32     	; 0x626 <__mulsf3_pse+0xa0>
 606:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__fp_inf>
 60a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_szero>
 60e:	5f 3f       	cpi	r21, 0xFF	; 255
 610:	e4 f3       	brlt	.-8      	; 0x60a <__mulsf3_pse+0x84>
 612:	98 3e       	cpi	r25, 0xE8	; 232
 614:	d4 f3       	brlt	.-12     	; 0x60a <__mulsf3_pse+0x84>
 616:	86 95       	lsr	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	b7 95       	ror	r27
 61e:	f7 95       	ror	r31
 620:	e7 95       	ror	r30
 622:	9f 5f       	subi	r25, 0xFF	; 255
 624:	c1 f7       	brne	.-16     	; 0x616 <__mulsf3_pse+0x90>
 626:	fe 2b       	or	r31, r30
 628:	88 0f       	add	r24, r24
 62a:	91 1d       	adc	r25, r1
 62c:	96 95       	lsr	r25
 62e:	87 95       	ror	r24
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <_exit>:
 634:	f8 94       	cli

00000636 <__stop_program>:
 636:	ff cf       	rjmp	.-2      	; 0x636 <__stop_program>
