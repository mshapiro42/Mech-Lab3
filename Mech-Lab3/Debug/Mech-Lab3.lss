
Mech-Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000008f2  00000986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800144  00800144  000009ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001576  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b61  00000000  00000000  0000213a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c04  00000000  00000000  00002c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bcb  00000000  00000000  000041da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004da5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3c       	cpi	r26, 0xC9	; 201
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  9e:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <avr/io.h>
#include "ADC.h"

void adc_init() {	
	//Set reference to built in channels
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Enable ADC w/ prescaler
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  b2:	08 95       	ret

000000b4 <adc_read>:
}

uint16_t adc_read(uint8_t ch) {
	//select channel to read
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	//start conversion
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
  cc:	80 81       	ld	r24, Z
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <adc_read+0x18>
	//return result
	return (ADC);
  d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  da:	08 95       	ret

000000dc <digital_filter_init>:
float a[5] = {1.000000000000000,  -1.570398851228171,  1.275613324983279, -0.484403368335085, 0.076197064610332};
uint8_t i;

/* Initialization */
void digital_filter_init(){
	rb_initialize_F(&inputs);
  dc:	87 e8       	ldi	r24, 0x87	; 135
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 45 02 	call	0x48a	; 0x48a <rb_initialize_F>
	rb_initialize_F(&outputs);
  e4:	85 e4       	ldi	r24, 0x45	; 69
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 45 02 	call	0x48a	; 0x48a <rb_initialize_F>
	
	for(i = 0; i <= 15; i++){	
  ec:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
		rb_push_front_F(&inputs, 0);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	ba 01       	movw	r22, r20
  f6:	87 e8       	ldi	r24, 0x87	; 135
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 4c 02 	call	0x498	; 0x498 <rb_push_front_F>
		rb_push_front_F(&outputs, 0);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	ba 01       	movw	r22, r20
 104:	85 e4       	ldi	r24, 0x45	; 69
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 4c 02 	call	0x498	; 0x498 <rb_push_front_F>
/* Initialization */
void digital_filter_init(){
	rb_initialize_F(&inputs);
	rb_initialize_F(&outputs);
	
	for(i = 0; i <= 15; i++){	
 10c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	58 f3       	brcs	.-42     	; 0xf0 <digital_filter_init+0x14>
		rb_push_front_F(&inputs, 0);
		rb_push_front_F(&outputs, 0);
	}
	
	return;
}
 11a:	08 95       	ret

0000011c <filterValue>:

float filterValue(float newInput){
 11c:	8f 92       	push	r8
 11e:	9f 92       	push	r9
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	cf 93       	push	r28
 12e:	6b 01       	movw	r12, r22
 130:	7c 01       	movw	r14, r24
	rb_pop_back_F(&inputs);
 132:	87 e8       	ldi	r24, 0x87	; 135
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 67 02 	call	0x4ce	; 0x4ce <rb_pop_back_F>
	rb_push_front_F(&inputs, newInput);
 13a:	b7 01       	movw	r22, r14
 13c:	a6 01       	movw	r20, r12
 13e:	87 e8       	ldi	r24, 0x87	; 135
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 4c 02 	call	0x498	; 0x498 <rb_push_front_F>
	float newOutput = 0.0;
	for(i=0; i <= 4; i++){	
 146:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	c1 2c       	mov	r12, r1
 14e:	d1 2c       	mov	r13, r1
 150:	76 01       	movw	r14, r12
 152:	c1 e0       	ldi	r28, 0x01	; 1
		newOutput += b[i]*rb_get_F(&inputs,i);
 154:	e6 2f       	mov	r30, r22
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	ec 5e       	subi	r30, 0xEC	; 236
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	80 80       	ld	r8, Z
 166:	91 80       	ldd	r9, Z+1	; 0x01
 168:	a2 80       	ldd	r10, Z+2	; 0x02
 16a:	b3 80       	ldd	r11, Z+3	; 0x03
 16c:	87 e8       	ldi	r24, 0x87	; 135
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 92 02 	call	0x524	; 0x524 <rb_get_F>
 174:	9b 01       	movw	r18, r22
 176:	ac 01       	movw	r20, r24
 178:	c5 01       	movw	r24, r10
 17a:	b4 01       	movw	r22, r8
 17c:	0e 94 0a 04 	call	0x814	; 0x814 <__mulsf3>
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	c7 01       	movw	r24, r14
 186:	b6 01       	movw	r22, r12
 188:	0e 94 10 03 	call	0x620	; 0x620 <__addsf3>
 18c:	6b 01       	movw	r12, r22
 18e:	7c 01       	movw	r14, r24
		if (i>0){
 190:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
 194:	66 23       	and	r22, r22
 196:	41 f1       	breq	.+80     	; 0x1e8 <filterValue+0xcc>
			newOutput -= a[i]*rb_get_F(&outputs,i-1);
 198:	e6 2f       	mov	r30, r22
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	e0 50       	subi	r30, 0x00	; 0
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	80 80       	ld	r8, Z
 1aa:	91 80       	ldd	r9, Z+1	; 0x01
 1ac:	a2 80       	ldd	r10, Z+2	; 0x02
 1ae:	b3 80       	ldd	r11, Z+3	; 0x03
 1b0:	61 50       	subi	r22, 0x01	; 1
 1b2:	85 e4       	ldi	r24, 0x45	; 69
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 92 02 	call	0x524	; 0x524 <rb_get_F>
 1ba:	9b 01       	movw	r18, r22
 1bc:	ac 01       	movw	r20, r24
 1be:	c5 01       	movw	r24, r10
 1c0:	b4 01       	movw	r22, r8
 1c2:	0e 94 0a 04 	call	0x814	; 0x814 <__mulsf3>
 1c6:	9b 01       	movw	r18, r22
 1c8:	ac 01       	movw	r20, r24
 1ca:	c7 01       	movw	r24, r14
 1cc:	b6 01       	movw	r22, r12
 1ce:	0e 94 0f 03 	call	0x61e	; 0x61e <__subsf3>
 1d2:	6b 01       	movw	r12, r22
 1d4:	7c 01       	movw	r14, r24

float filterValue(float newInput){
	rb_pop_back_F(&inputs);
	rb_push_front_F(&inputs, newInput);
	float newOutput = 0.0;
	for(i=0; i <= 4; i++){	
 1d6:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
 1da:	6f 5f       	subi	r22, 0xFF	; 255
 1dc:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__data_end>
 1e0:	65 30       	cpi	r22, 0x05	; 5
 1e2:	08 f4       	brcc	.+2      	; 0x1e6 <filterValue+0xca>
 1e4:	b7 cf       	rjmp	.-146    	; 0x154 <filterValue+0x38>
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <filterValue+0xd4>
 1e8:	c0 93 44 01 	sts	0x0144, r28	; 0x800144 <__data_end>
 1ec:	6c 2f       	mov	r22, r28
 1ee:	b2 cf       	rjmp	.-156    	; 0x154 <filterValue+0x38>
		newOutput += b[i]*rb_get_F(&inputs,i);
		if (i>0){
			newOutput -= a[i]*rb_get_F(&outputs,i-1);
		}
	}
	newOutput *= a[0];
 1f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1f8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 1fc:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 200:	c7 01       	movw	r24, r14
 202:	b6 01       	movw	r22, r12
 204:	0e 94 0a 04 	call	0x814	; 0x814 <__mulsf3>
 208:	6b 01       	movw	r12, r22
 20a:	7c 01       	movw	r14, r24
	rb_pop_back_F(&outputs);
 20c:	85 e4       	ldi	r24, 0x45	; 69
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 67 02 	call	0x4ce	; 0x4ce <rb_pop_back_F>
	rb_push_front_F(&outputs, newOutput);
 214:	b7 01       	movw	r22, r14
 216:	a6 01       	movw	r20, r12
 218:	85 e4       	ldi	r24, 0x45	; 69
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 4c 02 	call	0x498	; 0x498 <rb_push_front_F>
	return newOutput;
 220:	c7 01       	movw	r24, r14
 222:	b6 01       	movw	r22, r12
 224:	cf 91       	pop	r28
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	cf 90       	pop	r12
 22e:	bf 90       	pop	r11
 230:	af 90       	pop	r10
 232:	9f 90       	pop	r9
 234:	8f 90       	pop	r8
 236:	08 95       	ret

00000238 <USART_Init>:
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		while(!(NEW_MSG)); //wait for new byte
		a.asChar[i] = receive_byte(); //collect byte
	}
	return a.asFloat; //return float value
}
 238:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 23c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 24c:	08 95       	ret

0000024e <print_byte>:

void print_byte(uint8_t value){
	while(!(UCSR0A & (1<<UDRE0)));
 24e:	e0 ec       	ldi	r30, 0xC0	; 192
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	90 81       	ld	r25, Z
 254:	95 ff       	sbrs	r25, 5
 256:	fd cf       	rjmp	.-6      	; 0x252 <print_byte+0x4>
	//while(!(TRANSMIT_READY)); //after transmit line is ready
	UDR0 = value; //set transmit register to value
 258:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 25c:	08 95       	ret

0000025e <print_float>:
}

void print_float(float value){ 
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <print_float+0xe>
 26c:	00 d0       	rcall	.+0      	; 0x26e <print_float+0x10>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
 272:	69 83       	std	Y+1, r22	; 0x01
 274:	7a 83       	std	Y+2, r23	; 0x02
 276:	8b 83       	std	Y+3, r24	; 0x03
 278:	9c 83       	std	Y+4, r25	; 0x04
 27a:	8e 01       	movw	r16, r28
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	1f 4f       	sbci	r17, 0xFF	; 255
 280:	7e 01       	movw	r14, r28
 282:	85 e0       	ldi	r24, 0x05	; 5
 284:	e8 0e       	add	r14, r24
 286:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		print_byte(b.asChar[i]); //send each byte
 288:	f8 01       	movw	r30, r16
 28a:	81 91       	ld	r24, Z+
 28c:	8f 01       	movw	r16, r30
 28e:	0e 94 27 01 	call	0x24e	; 0x24e <print_byte>
}

void print_float(float value){ 
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
 292:	0e 15       	cp	r16, r14
 294:	1f 05       	cpc	r17, r15
 296:	c1 f7       	brne	.-16     	; 0x288 <print_float+0x2a>
		print_byte(b.asChar[i]); //send each byte
	}
}
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	08 95       	ret

000002ae <fastPWM_init>:
}

void fastPWM_init()
{
	// set Fast PWM mode on Timer 2 non-inverting (just add (1 << COM2A0) for inverting
	TCCR2A |= (1 << WGM20)|(1 << WGM21)|(1 << COM2A1);
 2ae:	e0 eb       	ldi	r30, 0xB0	; 176
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	83 68       	ori	r24, 0x83	; 131
 2b6:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20)|(1 << CS21)|(1 << CS22);
 2b8:	e1 eb       	ldi	r30, 0xB1	; 177
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	87 60       	ori	r24, 0x07	; 7
 2c0:	80 83       	st	Z, r24
 2c2:	08 95       	ret

000002c4 <main>:
	float asFloat;
	char asChars[4];
};*/

int main(void)
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	a5 97       	sbiw	r28, 0x25	; 37
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
	//struct Ring_Buffer_C output_queue;
	USART_Init(MYUBRR);
 2d8:	87 e6       	ldi	r24, 0x67	; 103
 2da:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Init>
    //rb_initialize_C(&output_queue);

	timer0_init(1024,155);
 2de:	6b e9       	ldi	r22, 0x9B	; 155
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	94 e0       	ldi	r25, 0x04	; 4
 2e6:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_init>
	timer1_init(0,15999);
 2ea:	6f e7       	ldi	r22, 0x7F	; 127
 2ec:	7e e3       	ldi	r23, 0x3E	; 62
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <timer1_init>
	fastPWM_init();
 2f6:	0e 94 57 01 	call	0x2ae	; 0x2ae <fastPWM_init>
	adc_init();
 2fa:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	digital_filter_init(0);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 6e 00 	call	0xdc	; 0xdc <digital_filter_init>
	
	//Set AI0 to Output and rest as Input
	DDRC |= 0b00000001;
 306:	38 9a       	sbi	0x07, 0	; 7
	//Set pin 11,13, and 8 as output for PWM, Dir, and enable, respectively
	DDRB |= 0b00101001;
 308:	84 b1       	in	r24, 0x04	; 4
 30a:	89 62       	ori	r24, 0x29	; 41
 30c:	84 b9       	out	0x04, r24	; 4
	
	//Set output to 1 to power sensor
	PORTC |= 0b00000001;
 30e:	40 9a       	sbi	0x08, 0	; 8
	//Set enable pin as high
	PORTB |= 0b00000001;
 310:	28 9a       	sbi	0x05, 0	; 5
	float filteredVel = 0;
	//union floatChars printVal;
	int vel_des[3] = {24, 0, -24};
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
	enum states{STOP = 0, CW = 1, CCW = 2} stateCur = STOP, stateLast = CW;
	float convertCoeff[] = {-354.5305, 7.2116, -0.0543, 1.9698E-4, -3.5356E-7, 3.0609E-10, -1.0193E-13};
 312:	8c e1       	ldi	r24, 0x1C	; 28
 314:	e8 e2       	ldi	r30, 0x28	; 40
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	de 01       	movw	r26, r28
 31a:	11 96       	adiw	r26, 0x01	; 1
 31c:	01 90       	ld	r0, Z+
 31e:	0d 92       	st	X+, r0
 320:	8a 95       	dec	r24
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x58>
	float tempSum;
	float voltTemp = 0;
	int duty = 200;
 324:	88 ec       	ldi	r24, 0xC8	; 200
 326:	8f 8f       	std	Y+31, r24	; 0x1f
	float angVel = 0;
	float filteredVel = 0;
	//union floatChars printVal;
	int vel_des[3] = {24, 0, -24};
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
	enum states{STOP = 0, CW = 1, CCW = 2} stateCur = STOP, stateLast = CW;
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	9d a3       	std	Y+37, r25	; 0x25
 32c:	1c a2       	std	Y+36, r1	; 0x24
	float angPosLast = 0;
	float angVel = 0;
	float filteredVel = 0;
	//union floatChars printVal;
	int vel_des[3] = {24, 0, -24};
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
 32e:	1e 8e       	std	Y+30, r1	; 0x1e
 330:	1d 8e       	std	Y+29, r1	; 0x1d
	float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
	float angPosLast = 0;
	float angVel = 0;
	float filteredVel = 0;
 332:	81 2c       	mov	r8, r1
 334:	91 2c       	mov	r9, r1
 336:	54 01       	movw	r10, r8
	
	//Sampling frequency for converting to velocity, 1/0.001
	float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
	float angPosLast = 0;
 338:	18 a2       	std	Y+32, r1	; 0x20
 33a:	19 a2       	std	Y+33, r1	; 0x21
 33c:	1a a2       	std	Y+34, r1	; 0x22
 33e:	1b a2       	std	Y+35, r1	; 0x23
 340:	1e 01       	movw	r2, r28
 342:	ed e1       	ldi	r30, 0x1D	; 29
 344:	2e 0e       	add	r2, r30
 346:	31 1c       	adc	r3, r1
	float voltTemp = 0;
	int duty = 200;

    while (1) 
    {
		OCR2A = duty; // deadband at about 10
 348:	8f 8d       	ldd	r24, Y+31	; 0x1f
 34a:	e3 eb       	ldi	r30, 0xB3	; 179
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 83       	st	Z, r24
		//if TIMER0_flag
		if(TIFR0 & (1 << OCF0A))
 350:	a9 9b       	sbis	0x15, 1	; 21
 352:	38 c0       	rjmp	.+112    	; 0x3c4 <main+0x100>
		{
			timer0Count++;
 354:	ed 8d       	ldd	r30, Y+29	; 0x1d
 356:	fe 8d       	ldd	r31, Y+30	; 0x1e
 358:	31 96       	adiw	r30, 0x01	; 1
 35a:	fe 8f       	std	Y+30, r31	; 0x1e
 35c:	ed 8f       	std	Y+29, r30	; 0x1d
			if(timer0Count == 50)
 35e:	f2 97       	sbiw	r30, 0x32	; 50
 360:	61 f5       	brne	.+88     	; 0x3ba <main+0xf6>
			{
				// Check for next action
				if(stateCur == 0 && stateLast == 1)
 362:	fc a1       	ldd	r31, Y+36	; 0x24
 364:	f1 11       	cpse	r31, r1
 366:	14 c0       	rjmp	.+40     	; 0x390 <main+0xcc>
 368:	8d a1       	ldd	r24, Y+37	; 0x25
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	c1 f0       	breq	.+48     	; 0x39e <main+0xda>
				{
					stateLast = stateCur;
					stateCur = CCW;
					setNewPWM(vel_des[2]); 
					duty = 200;
				} else if(stateCur == 0 && stateLast == 2)
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	f9 f4       	brne	.+62     	; 0x3b0 <main+0xec>

void setNewPWM(int vel_des)
{
	if(vel_des > 0)
	{
		PORTB |= 0b00000001;
 372:	28 9a       	sbi	0x05, 0	; 5
		TCCR2A |= (1 << WGM20)|(1 << WGM21)|(1 << COM2A1);
 374:	e0 eb       	ldi	r30, 0xB0	; 176
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	83 68       	ori	r24, 0x83	; 131
 37c:	80 83       	st	Z, r24
 37e:	fc a1       	ldd	r31, Y+36	; 0x24
 380:	fd a3       	std	Y+37, r31	; 0x25
				} else if(stateCur == 0 && stateLast == 2)
				{
					stateLast = stateCur;
					stateCur = CW;
					setNewPWM(vel_des[0]);
					duty = 200;
 382:	88 ec       	ldi	r24, 0xC8	; 200
 384:	8f 8f       	std	Y+31, r24	; 0x1f
					setNewPWM(vel_des[2]); 
					duty = 200;
				} else if(stateCur == 0 && stateLast == 2)
				{
					stateLast = stateCur;
					stateCur = CW;
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	9c a3       	std	Y+36, r25	; 0x24
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
				}
				timer0Count = 0;
 38a:	1e 8e       	std	Y+30, r1	; 0x1e
 38c:	1d 8e       	std	Y+29, r1	; 0x1d
 38e:	15 c0       	rjmp	.+42     	; 0x3ba <main+0xf6>
 390:	ec a1       	ldd	r30, Y+36	; 0x24
 392:	ed a3       	std	Y+37, r30	; 0x25
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
 394:	1f 8e       	std	Y+31, r1	; 0x1f
					setNewPWM(vel_des[0]);
					duty = 200;
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
 396:	1c a2       	std	Y+36, r1	; 0x24
					setNewPWM(vel_des[1]);
					duty = 0;
				}
				timer0Count = 0;
 398:	1e 8e       	std	Y+30, r1	; 0x1e
 39a:	1d 8e       	std	Y+29, r1	; 0x1d
 39c:	0e c0       	rjmp	.+28     	; 0x3ba <main+0xf6>
 39e:	fc a1       	ldd	r31, Y+36	; 0x24
 3a0:	fd a3       	std	Y+37, r31	; 0x25
				if(stateCur == 0 && stateLast == 1)
				{
					stateLast = stateCur;
					stateCur = CCW;
					setNewPWM(vel_des[2]); 
					duty = 200;
 3a2:	88 ec       	ldi	r24, 0xC8	; 200
 3a4:	8f 8f       	std	Y+31, r24	; 0x1f
			{
				// Check for next action
				if(stateCur == 0 && stateLast == 1)
				{
					stateLast = stateCur;
					stateCur = CCW;
 3a6:	92 e0       	ldi	r25, 0x02	; 2
 3a8:	9c a3       	std	Y+36, r25	; 0x24
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
				}
				timer0Count = 0;
 3aa:	1e 8e       	std	Y+30, r1	; 0x1e
 3ac:	1d 8e       	std	Y+29, r1	; 0x1d
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <main+0xf6>
 3b0:	ec a1       	ldd	r30, Y+36	; 0x24
 3b2:	ed a3       	std	Y+37, r30	; 0x25
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
 3b4:	1f 8e       	std	Y+31, r1	; 0x1f
				}
				timer0Count = 0;
 3b6:	1e 8e       	std	Y+30, r1	; 0x1e
 3b8:	1d 8e       	std	Y+29, r1	; 0x1d
			/*printVal.asFloat = 500; //edit so we don't drop readings during prints
			printVal.asFloat = angPos;
			for(int i = 0; i < 4; i ++){
				rb_push_back_C(&output_queue, printVal.asChars[i]);
			}*/
			print_float(filteredVel);
 3ba:	c5 01       	movw	r24, r10
 3bc:	b4 01       	movw	r22, r8
 3be:	0e 94 2f 01 	call	0x25e	; 0x25e <print_float>
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 3c2:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if(TIFR1 & (1 << OCF1A))
 3c4:	b1 9b       	sbis	0x16, 1	; 22
 3c6:	c0 cf       	rjmp	.-128    	; 0x348 <main+0x84>
		{
			//read voltage 
			volt = adc_read(1);	
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 3ce:	bc 01       	movw	r22, r24
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__floatunsisf>
 3d8:	76 2e       	mov	r7, r22
 3da:	67 2e       	mov	r6, r23
 3dc:	58 2e       	mov	r5, r24
 3de:	49 2e       	mov	r4, r25
			voltTemp = volt;
			//convert to position in radians
			tempSum = convertCoeff[0];
 3e0:	f9 80       	ldd	r15, Y+1	; 0x01
 3e2:	0a 81       	ldd	r16, Y+2	; 0x02
 3e4:	1b 81       	ldd	r17, Y+3	; 0x03
 3e6:	ec 80       	ldd	r14, Y+4	; 0x04
 3e8:	4e 01       	movw	r8, r28
 3ea:	f5 e0       	ldi	r31, 0x05	; 5
 3ec:	8f 0e       	add	r8, r31
 3ee:	91 1c       	adc	r9, r1
		//if TIMER1_flag
		if(TIFR1 & (1 << OCF1A))
		{
			//read voltage 
			volt = adc_read(1);	
			voltTemp = volt;
 3f0:	b6 2e       	mov	r11, r22
 3f2:	a7 2e       	mov	r10, r23
 3f4:	c8 2e       	mov	r12, r24
 3f6:	d9 2e       	mov	r13, r25
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
				tempSum += convertCoeff[i]*voltTemp;
 3f8:	f4 01       	movw	r30, r8
 3fa:	61 91       	ld	r22, Z+
 3fc:	71 91       	ld	r23, Z+
 3fe:	81 91       	ld	r24, Z+
 400:	91 91       	ld	r25, Z+
 402:	4f 01       	movw	r8, r30
 404:	2b 2d       	mov	r18, r11
 406:	3a 2d       	mov	r19, r10
 408:	4c 2d       	mov	r20, r12
 40a:	5d 2d       	mov	r21, r13
 40c:	0e 94 0a 04 	call	0x814	; 0x814 <__mulsf3>
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	6f 2d       	mov	r22, r15
 416:	70 2f       	mov	r23, r16
 418:	81 2f       	mov	r24, r17
 41a:	9e 2d       	mov	r25, r14
 41c:	0e 94 10 03 	call	0x620	; 0x620 <__addsf3>
 420:	f6 2e       	mov	r15, r22
 422:	07 2f       	mov	r16, r23
 424:	18 2f       	mov	r17, r24
 426:	e9 2e       	mov	r14, r25
				voltTemp *= volt;
 428:	27 2d       	mov	r18, r7
 42a:	36 2d       	mov	r19, r6
 42c:	45 2d       	mov	r20, r5
 42e:	54 2d       	mov	r21, r4
 430:	6b 2d       	mov	r22, r11
 432:	7a 2d       	mov	r23, r10
 434:	8c 2d       	mov	r24, r12
 436:	9d 2d       	mov	r25, r13
 438:	0e 94 0a 04 	call	0x814	; 0x814 <__mulsf3>
 43c:	b6 2e       	mov	r11, r22
 43e:	a7 2e       	mov	r10, r23
 440:	c8 2e       	mov	r12, r24
 442:	d9 2e       	mov	r13, r25
			volt = adc_read(1);	
			voltTemp = volt;
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
 444:	82 14       	cp	r8, r2
 446:	93 04       	cpc	r9, r3
 448:	b9 f6       	brne	.-82     	; 0x3f8 <main+0x134>
			
			//add angPos to queue
			angPosLast = angPos;
			
			//filter velocity
			filteredVel = filterValue(angVel);
 44a:	28 a1       	ldd	r18, Y+32	; 0x20
 44c:	39 a1       	ldd	r19, Y+33	; 0x21
 44e:	4a a1       	ldd	r20, Y+34	; 0x22
 450:	5b a1       	ldd	r21, Y+35	; 0x23
 452:	6f 2d       	mov	r22, r15
 454:	70 2f       	mov	r23, r16
 456:	81 2f       	mov	r24, r17
 458:	9e 2d       	mov	r25, r14
 45a:	0e 94 0f 03 	call	0x61e	; 0x61e <__subsf3>
 45e:	2a e6       	ldi	r18, 0x6A	; 106
 460:	3b e0       	ldi	r19, 0x0B	; 11
 462:	46 e3       	ldi	r20, 0x36	; 54
 464:	5b e3       	ldi	r21, 0x3B	; 59
 466:	0e 94 0a 04 	call	0x814	; 0x814 <__mulsf3>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	4a e7       	ldi	r20, 0x7A	; 122
 470:	54 e4       	ldi	r21, 0x44	; 68
 472:	0e 94 0a 04 	call	0x814	; 0x814 <__mulsf3>
 476:	0e 94 8e 00 	call	0x11c	; 0x11c <filterValue>
 47a:	4b 01       	movw	r8, r22
 47c:	5c 01       	movw	r10, r24
			
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 47e:	b1 9a       	sbi	0x16, 1	; 22
			voltTemp = volt;
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
				tempSum += convertCoeff[i]*voltTemp;
 480:	f8 a2       	std	Y+32, r15	; 0x20
 482:	09 a3       	std	Y+33, r16	; 0x21
 484:	1a a3       	std	Y+34, r17	; 0x22
 486:	eb a2       	std	Y+35, r14	; 0x23
 488:	5f cf       	rjmp	.-322    	; 0x348 <main+0x84>

0000048a <rb_initialize_F>:
    } 
    else {
        return 0;
    }
   
}
 48a:	fc 01       	movw	r30, r24
 48c:	e0 5c       	subi	r30, 0xC0	; 192
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	10 82       	st	Z, r1
 492:	31 96       	adiw	r30, 0x01	; 1
 494:	10 82       	st	Z, r1
 496:	08 95       	ret

00000498 <rb_push_front_F>:
 498:	9c 01       	movw	r18, r24
 49a:	fc 01       	movw	r30, r24
 49c:	e0 5c       	subi	r30, 0xC0	; 192
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	90 81       	ld	r25, Z
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	9f 70       	andi	r25, 0x0F	; 15
 4a6:	90 83       	st	Z, r25
 4a8:	31 96       	adiw	r30, 0x01	; 1
 4aa:	80 81       	ld	r24, Z
 4ac:	98 13       	cpse	r25, r24
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <rb_push_front_F+0x20>
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	89 0f       	add	r24, r25
 4b4:	8f 70       	andi	r24, 0x0F	; 15
 4b6:	80 83       	st	Z, r24
 4b8:	f9 01       	movw	r30, r18
 4ba:	84 e0       	ldi	r24, 0x04	; 4
 4bc:	98 9f       	mul	r25, r24
 4be:	e0 0d       	add	r30, r0
 4c0:	f1 1d       	adc	r31, r1
 4c2:	11 24       	eor	r1, r1
 4c4:	40 83       	st	Z, r20
 4c6:	51 83       	std	Z+1, r21	; 0x01
 4c8:	62 83       	std	Z+2, r22	; 0x02
 4ca:	73 83       	std	Z+3, r23	; 0x03
 4cc:	08 95       	ret

000004ce <rb_pop_back_F>:
 4ce:	9c 01       	movw	r18, r24
 4d0:	fc 01       	movw	r30, r24
 4d2:	ef 5b       	subi	r30, 0xBF	; 191
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	90 81       	ld	r25, Z
 4d8:	e9 2f       	mov	r30, r25
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	d9 01       	movw	r26, r18
 4e0:	a0 5c       	subi	r26, 0xC0	; 192
 4e2:	bf 4f       	sbci	r27, 0xFF	; 255
 4e4:	8c 91       	ld	r24, X
 4e6:	98 17       	cp	r25, r24
 4e8:	a1 f0       	breq	.+40     	; 0x512 <rb_pop_back_F+0x44>
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	e2 0f       	add	r30, r18
 4f4:	f3 1f       	adc	r31, r19
 4f6:	60 81       	ld	r22, Z
 4f8:	51 81       	ldd	r21, Z+1	; 0x01
 4fa:	42 81       	ldd	r20, Z+2	; 0x02
 4fc:	83 81       	ldd	r24, Z+3	; 0x03
 4fe:	f9 01       	movw	r30, r18
 500:	ef 5b       	subi	r30, 0xBF	; 191
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	91 50       	subi	r25, 0x01	; 1
 506:	9f 70       	andi	r25, 0x0F	; 15
 508:	90 83       	st	Z, r25
 50a:	e6 2f       	mov	r30, r22
 50c:	34 2f       	mov	r19, r20
 50e:	28 2f       	mov	r18, r24
 510:	04 c0       	rjmp	.+8      	; 0x51a <rb_pop_back_F+0x4c>
 512:	e0 e0       	ldi	r30, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	6e 2f       	mov	r22, r30
 51c:	75 2f       	mov	r23, r21
 51e:	83 2f       	mov	r24, r19
 520:	92 2f       	mov	r25, r18
 522:	08 95       	ret

00000524 <rb_get_F>:

/* access element */
float rb_get_F( const struct Ring_Buffer_F* p_buf, uint8_t index)
{
    // return value at start + index wrapped properly
    if (p_buf->start_index != p_buf->end_index){ //if buffer is not empty
 524:	fc 01       	movw	r30, r24
 526:	e0 5c       	subi	r30, 0xC0	; 192
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	20 81       	ld	r18, Z
 52c:	31 96       	adiw	r30, 0x01	; 1
 52e:	30 81       	ld	r19, Z
 530:	23 17       	cp	r18, r19
 532:	69 f0       	breq	.+26     	; 0x54e <rb_get_F+0x2a>
        index = (p_buf->start_index + index) & RB_MASK_F; //wrap to active length
 534:	62 0f       	add	r22, r18
        return p_buf->buffer[index]; // update
 536:	6f 70       	andi	r22, 0x0F	; 15
 538:	fc 01       	movw	r30, r24
 53a:	24 e0       	ldi	r18, 0x04	; 4
 53c:	62 9f       	mul	r22, r18
 53e:	e0 0d       	add	r30, r0
 540:	f1 1d       	adc	r31, r1
 542:	11 24       	eor	r1, r1
 544:	60 81       	ld	r22, Z
 546:	71 81       	ldd	r23, Z+1	; 0x01
 548:	82 81       	ldd	r24, Z+2	; 0x02
 54a:	93 81       	ldd	r25, Z+3	; 0x03
 54c:	08 95       	ret
    }
    else{
        return 0;
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	cb 01       	movw	r24, r22
    }
    
}
 554:	08 95       	ret

00000556 <timer0_init>:
#include <avr/io.h>
#include "Timers.h"

void timer0_init(int prescaler,int compVal)
{
 556:	9c 01       	movw	r18, r24
	// enable CTC for Timer0
	TCCR0A |= (1 << WGM01);
 558:	94 b5       	in	r25, 0x24	; 36
 55a:	92 60       	ori	r25, 0x02	; 2
 55c:	94 bd       	out	0x24, r25	; 36
	// set appropriate prescaler
	if(prescaler == 0){
 55e:	21 15       	cp	r18, r1
 560:	31 05       	cpc	r19, r1
 562:	21 f4       	brne	.+8      	; 0x56c <timer0_init+0x16>
		TCCR0B |= (1 << CS00);
 564:	85 b5       	in	r24, 0x25	; 37
 566:	81 60       	ori	r24, 0x01	; 1
 568:	85 bd       	out	0x25, r24	; 37
 56a:	0e c0       	rjmp	.+28     	; 0x588 <timer0_init+0x32>
	} 
	if(prescaler == 8){
 56c:	28 30       	cpi	r18, 0x08	; 8
 56e:	31 05       	cpc	r19, r1
 570:	21 f4       	brne	.+8      	; 0x57a <timer0_init+0x24>
		TCCR0B |= (1 << CS01);
 572:	85 b5       	in	r24, 0x25	; 37
 574:	82 60       	ori	r24, 0x02	; 2
 576:	85 bd       	out	0x25, r24	; 37
 578:	0f c0       	rjmp	.+30     	; 0x598 <timer0_init+0x42>
	} 
	if(prescaler == 64){
 57a:	20 34       	cpi	r18, 0x40	; 64
 57c:	31 05       	cpc	r19, r1
 57e:	21 f4       	brne	.+8      	; 0x588 <timer0_init+0x32>
		TCCR0B |= (1 << CS00)|(1 << CS01);
 580:	85 b5       	in	r24, 0x25	; 37
 582:	83 60       	ori	r24, 0x03	; 3
 584:	85 bd       	out	0x25, r24	; 37
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <timer0_init+0x4e>
	} 
	if(prescaler == 256){
 588:	21 15       	cp	r18, r1
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	38 07       	cpc	r19, r24
 58e:	21 f4       	brne	.+8      	; 0x598 <timer0_init+0x42>
		TCCR0B |= (1 << CS02);
 590:	85 b5       	in	r24, 0x25	; 37
 592:	84 60       	ori	r24, 0x04	; 4
 594:	85 bd       	out	0x25, r24	; 37
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <timer0_init+0x4e>
	} 
	if(prescaler == 1024){
 598:	21 15       	cp	r18, r1
 59a:	34 40       	sbci	r19, 0x04	; 4
 59c:	19 f4       	brne	.+6      	; 0x5a4 <timer0_init+0x4e>
		TCCR0B |= (1 << CS02)|(1 << CS00);
 59e:	85 b5       	in	r24, 0x25	; 37
 5a0:	85 60       	ori	r24, 0x05	; 5
 5a2:	85 bd       	out	0x25, r24	; 37
	} 
	// initialize counter to zero
	TCNT0 = 0;
 5a4:	16 bc       	out	0x26, r1	; 38
	// initialize compare value for CTC
	OCR0A = compVal;
 5a6:	67 bd       	out	0x27, r22	; 39
 5a8:	08 95       	ret

000005aa <timer1_init>:
}

void timer1_init(int prescaler,int compVal)
{
 5aa:	9c 01       	movw	r18, r24
	// enable CTC for Timer1
	TCCR0B |= (1 << WGM12);
 5ac:	95 b5       	in	r25, 0x25	; 37
 5ae:	98 60       	ori	r25, 0x08	; 8
 5b0:	95 bd       	out	0x25, r25	; 37
	// set appropriate prescaler
	if(prescaler == 0){
 5b2:	21 15       	cp	r18, r1
 5b4:	31 05       	cpc	r19, r1
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <timer1_init+0x1a>
		TCCR1B |= (1 << CS10);
 5b8:	e1 e8       	ldi	r30, 0x81	; 129
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	80 83       	st	Z, r24
 5c2:	12 c0       	rjmp	.+36     	; 0x5e8 <timer1_init+0x3e>
	} 
	if(prescaler == 8){
 5c4:	28 30       	cpi	r18, 0x08	; 8
 5c6:	31 05       	cpc	r19, r1
 5c8:	31 f4       	brne	.+12     	; 0x5d6 <timer1_init+0x2c>
		TCCR1B |= (1 << CS11);
 5ca:	e1 e8       	ldi	r30, 0x81	; 129
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	80 83       	st	Z, r24
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <timer1_init+0x52>
	} 
	if(prescaler == 64){
 5d6:	20 34       	cpi	r18, 0x40	; 64
 5d8:	31 05       	cpc	r19, r1
 5da:	31 f4       	brne	.+12     	; 0x5e8 <timer1_init+0x3e>
		TCCR1B |= (1 << CS11)|(1 << CS10);
 5dc:	e1 e8       	ldi	r30, 0x81	; 129
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	83 60       	ori	r24, 0x03	; 3
 5e4:	80 83       	st	Z, r24
 5e6:	12 c0       	rjmp	.+36     	; 0x60c <timer1_init+0x62>
	} 
	if(prescaler == 256){
 5e8:	21 15       	cp	r18, r1
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	38 07       	cpc	r19, r24
 5ee:	31 f4       	brne	.+12     	; 0x5fc <timer1_init+0x52>
		TCCR1B |= (1 << CS12);
 5f0:	e1 e8       	ldi	r30, 0x81	; 129
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	84 60       	ori	r24, 0x04	; 4
 5f8:	80 83       	st	Z, r24
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <timer1_init+0x62>
	} 
	if(prescaler == 1024){
 5fc:	21 15       	cp	r18, r1
 5fe:	34 40       	sbci	r19, 0x04	; 4
 600:	29 f4       	brne	.+10     	; 0x60c <timer1_init+0x62>
		TCCR1B |= (1 << CS10)|(1 << CS12);
 602:	e1 e8       	ldi	r30, 0x81	; 129
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	85 60       	ori	r24, 0x05	; 5
 60a:	80 83       	st	Z, r24
	}
	// initialize counter to zero
	TCNT1 = 0;
 60c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 610:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// initialize compare value
	OCR1B = compVal;
 614:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 618:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 61c:	08 95       	ret

0000061e <__subsf3>:
 61e:	50 58       	subi	r21, 0x80	; 128

00000620 <__addsf3>:
 620:	bb 27       	eor	r27, r27
 622:	aa 27       	eor	r26, r26
 624:	0e 94 27 03 	call	0x64e	; 0x64e <__addsf3x>
 628:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_round>
 62c:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_pscA>
 630:	38 f0       	brcs	.+14     	; 0x640 <__addsf3+0x20>
 632:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_pscB>
 636:	20 f0       	brcs	.+8      	; 0x640 <__addsf3+0x20>
 638:	39 f4       	brne	.+14     	; 0x648 <__addsf3+0x28>
 63a:	9f 3f       	cpi	r25, 0xFF	; 255
 63c:	19 f4       	brne	.+6      	; 0x644 <__addsf3+0x24>
 63e:	26 f4       	brtc	.+8      	; 0x648 <__addsf3+0x28>
 640:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_nan>
 644:	0e f4       	brtc	.+2      	; 0x648 <__addsf3+0x28>
 646:	e0 95       	com	r30
 648:	e7 fb       	bst	r30, 7
 64a:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_inf>

0000064e <__addsf3x>:
 64e:	e9 2f       	mov	r30, r25
 650:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fp_split3>
 654:	58 f3       	brcs	.-42     	; 0x62c <__addsf3+0xc>
 656:	ba 17       	cp	r27, r26
 658:	62 07       	cpc	r22, r18
 65a:	73 07       	cpc	r23, r19
 65c:	84 07       	cpc	r24, r20
 65e:	95 07       	cpc	r25, r21
 660:	20 f0       	brcs	.+8      	; 0x66a <__addsf3x+0x1c>
 662:	79 f4       	brne	.+30     	; 0x682 <__addsf3x+0x34>
 664:	a6 f5       	brtc	.+104    	; 0x6ce <__addsf3x+0x80>
 666:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_zero>
 66a:	0e f4       	brtc	.+2      	; 0x66e <__addsf3x+0x20>
 66c:	e0 95       	com	r30
 66e:	0b 2e       	mov	r0, r27
 670:	ba 2f       	mov	r27, r26
 672:	a0 2d       	mov	r26, r0
 674:	0b 01       	movw	r0, r22
 676:	b9 01       	movw	r22, r18
 678:	90 01       	movw	r18, r0
 67a:	0c 01       	movw	r0, r24
 67c:	ca 01       	movw	r24, r20
 67e:	a0 01       	movw	r20, r0
 680:	11 24       	eor	r1, r1
 682:	ff 27       	eor	r31, r31
 684:	59 1b       	sub	r21, r25
 686:	99 f0       	breq	.+38     	; 0x6ae <__addsf3x+0x60>
 688:	59 3f       	cpi	r21, 0xF9	; 249
 68a:	50 f4       	brcc	.+20     	; 0x6a0 <__addsf3x+0x52>
 68c:	50 3e       	cpi	r21, 0xE0	; 224
 68e:	68 f1       	brcs	.+90     	; 0x6ea <__addsf3x+0x9c>
 690:	1a 16       	cp	r1, r26
 692:	f0 40       	sbci	r31, 0x00	; 0
 694:	a2 2f       	mov	r26, r18
 696:	23 2f       	mov	r18, r19
 698:	34 2f       	mov	r19, r20
 69a:	44 27       	eor	r20, r20
 69c:	58 5f       	subi	r21, 0xF8	; 248
 69e:	f3 cf       	rjmp	.-26     	; 0x686 <__addsf3x+0x38>
 6a0:	46 95       	lsr	r20
 6a2:	37 95       	ror	r19
 6a4:	27 95       	ror	r18
 6a6:	a7 95       	ror	r26
 6a8:	f0 40       	sbci	r31, 0x00	; 0
 6aa:	53 95       	inc	r21
 6ac:	c9 f7       	brne	.-14     	; 0x6a0 <__addsf3x+0x52>
 6ae:	7e f4       	brtc	.+30     	; 0x6ce <__addsf3x+0x80>
 6b0:	1f 16       	cp	r1, r31
 6b2:	ba 0b       	sbc	r27, r26
 6b4:	62 0b       	sbc	r22, r18
 6b6:	73 0b       	sbc	r23, r19
 6b8:	84 0b       	sbc	r24, r20
 6ba:	ba f0       	brmi	.+46     	; 0x6ea <__addsf3x+0x9c>
 6bc:	91 50       	subi	r25, 0x01	; 1
 6be:	a1 f0       	breq	.+40     	; 0x6e8 <__addsf3x+0x9a>
 6c0:	ff 0f       	add	r31, r31
 6c2:	bb 1f       	adc	r27, r27
 6c4:	66 1f       	adc	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	c2 f7       	brpl	.-16     	; 0x6bc <__addsf3x+0x6e>
 6cc:	0e c0       	rjmp	.+28     	; 0x6ea <__addsf3x+0x9c>
 6ce:	ba 0f       	add	r27, r26
 6d0:	62 1f       	adc	r22, r18
 6d2:	73 1f       	adc	r23, r19
 6d4:	84 1f       	adc	r24, r20
 6d6:	48 f4       	brcc	.+18     	; 0x6ea <__addsf3x+0x9c>
 6d8:	87 95       	ror	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b7 95       	ror	r27
 6e0:	f7 95       	ror	r31
 6e2:	9e 3f       	cpi	r25, 0xFE	; 254
 6e4:	08 f0       	brcs	.+2      	; 0x6e8 <__addsf3x+0x9a>
 6e6:	b0 cf       	rjmp	.-160    	; 0x648 <__addsf3+0x28>
 6e8:	93 95       	inc	r25
 6ea:	88 0f       	add	r24, r24
 6ec:	08 f0       	brcs	.+2      	; 0x6f0 <__addsf3x+0xa2>
 6ee:	99 27       	eor	r25, r25
 6f0:	ee 0f       	add	r30, r30
 6f2:	97 95       	ror	r25
 6f4:	87 95       	ror	r24
 6f6:	08 95       	ret

000006f8 <__floatunsisf>:
 6f8:	e8 94       	clt
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <__floatsisf+0x12>

000006fc <__floatsisf>:
 6fc:	97 fb       	bst	r25, 7
 6fe:	3e f4       	brtc	.+14     	; 0x70e <__floatsisf+0x12>
 700:	90 95       	com	r25
 702:	80 95       	com	r24
 704:	70 95       	com	r23
 706:	61 95       	neg	r22
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	99 23       	and	r25, r25
 710:	a9 f0       	breq	.+42     	; 0x73c <__floatsisf+0x40>
 712:	f9 2f       	mov	r31, r25
 714:	96 e9       	ldi	r25, 0x96	; 150
 716:	bb 27       	eor	r27, r27
 718:	93 95       	inc	r25
 71a:	f6 95       	lsr	r31
 71c:	87 95       	ror	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f1 11       	cpse	r31, r1
 726:	f8 cf       	rjmp	.-16     	; 0x718 <__floatsisf+0x1c>
 728:	fa f4       	brpl	.+62     	; 0x768 <__floatsisf+0x6c>
 72a:	bb 0f       	add	r27, r27
 72c:	11 f4       	brne	.+4      	; 0x732 <__floatsisf+0x36>
 72e:	60 ff       	sbrs	r22, 0
 730:	1b c0       	rjmp	.+54     	; 0x768 <__floatsisf+0x6c>
 732:	6f 5f       	subi	r22, 0xFF	; 255
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	8f 4f       	sbci	r24, 0xFF	; 255
 738:	9f 4f       	sbci	r25, 0xFF	; 255
 73a:	16 c0       	rjmp	.+44     	; 0x768 <__floatsisf+0x6c>
 73c:	88 23       	and	r24, r24
 73e:	11 f0       	breq	.+4      	; 0x744 <__floatsisf+0x48>
 740:	96 e9       	ldi	r25, 0x96	; 150
 742:	11 c0       	rjmp	.+34     	; 0x766 <__floatsisf+0x6a>
 744:	77 23       	and	r23, r23
 746:	21 f0       	breq	.+8      	; 0x750 <__floatsisf+0x54>
 748:	9e e8       	ldi	r25, 0x8E	; 142
 74a:	87 2f       	mov	r24, r23
 74c:	76 2f       	mov	r23, r22
 74e:	05 c0       	rjmp	.+10     	; 0x75a <__floatsisf+0x5e>
 750:	66 23       	and	r22, r22
 752:	71 f0       	breq	.+28     	; 0x770 <__floatsisf+0x74>
 754:	96 e8       	ldi	r25, 0x86	; 134
 756:	86 2f       	mov	r24, r22
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	2a f0       	brmi	.+10     	; 0x768 <__floatsisf+0x6c>
 75e:	9a 95       	dec	r25
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	da f7       	brpl	.-10     	; 0x75e <__floatsisf+0x62>
 768:	88 0f       	add	r24, r24
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret

00000772 <__fp_inf>:
 772:	97 f9       	bld	r25, 7
 774:	9f 67       	ori	r25, 0x7F	; 127
 776:	80 e8       	ldi	r24, 0x80	; 128
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	08 95       	ret

0000077e <__fp_nan>:
 77e:	9f ef       	ldi	r25, 0xFF	; 255
 780:	80 ec       	ldi	r24, 0xC0	; 192
 782:	08 95       	ret

00000784 <__fp_pscA>:
 784:	00 24       	eor	r0, r0
 786:	0a 94       	dec	r0
 788:	16 16       	cp	r1, r22
 78a:	17 06       	cpc	r1, r23
 78c:	18 06       	cpc	r1, r24
 78e:	09 06       	cpc	r0, r25
 790:	08 95       	ret

00000792 <__fp_pscB>:
 792:	00 24       	eor	r0, r0
 794:	0a 94       	dec	r0
 796:	12 16       	cp	r1, r18
 798:	13 06       	cpc	r1, r19
 79a:	14 06       	cpc	r1, r20
 79c:	05 06       	cpc	r0, r21
 79e:	08 95       	ret

000007a0 <__fp_round>:
 7a0:	09 2e       	mov	r0, r25
 7a2:	03 94       	inc	r0
 7a4:	00 0c       	add	r0, r0
 7a6:	11 f4       	brne	.+4      	; 0x7ac <__fp_round+0xc>
 7a8:	88 23       	and	r24, r24
 7aa:	52 f0       	brmi	.+20     	; 0x7c0 <__fp_round+0x20>
 7ac:	bb 0f       	add	r27, r27
 7ae:	40 f4       	brcc	.+16     	; 0x7c0 <__fp_round+0x20>
 7b0:	bf 2b       	or	r27, r31
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <__fp_round+0x18>
 7b4:	60 ff       	sbrs	r22, 0
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <__fp_round+0x20>
 7b8:	6f 5f       	subi	r22, 0xFF	; 255
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	08 95       	ret

000007c2 <__fp_split3>:
 7c2:	57 fd       	sbrc	r21, 7
 7c4:	90 58       	subi	r25, 0x80	; 128
 7c6:	44 0f       	add	r20, r20
 7c8:	55 1f       	adc	r21, r21
 7ca:	59 f0       	breq	.+22     	; 0x7e2 <__fp_splitA+0x10>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	71 f0       	breq	.+28     	; 0x7ec <__fp_splitA+0x1a>
 7d0:	47 95       	ror	r20

000007d2 <__fp_splitA>:
 7d2:	88 0f       	add	r24, r24
 7d4:	97 fb       	bst	r25, 7
 7d6:	99 1f       	adc	r25, r25
 7d8:	61 f0       	breq	.+24     	; 0x7f2 <__fp_splitA+0x20>
 7da:	9f 3f       	cpi	r25, 0xFF	; 255
 7dc:	79 f0       	breq	.+30     	; 0x7fc <__fp_splitA+0x2a>
 7de:	87 95       	ror	r24
 7e0:	08 95       	ret
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	14 06       	cpc	r1, r20
 7e8:	55 1f       	adc	r21, r21
 7ea:	f2 cf       	rjmp	.-28     	; 0x7d0 <__fp_split3+0xe>
 7ec:	46 95       	lsr	r20
 7ee:	f1 df       	rcall	.-30     	; 0x7d2 <__fp_splitA>
 7f0:	08 c0       	rjmp	.+16     	; 0x802 <__fp_splitA+0x30>
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	f1 cf       	rjmp	.-30     	; 0x7de <__fp_splitA+0xc>
 7fc:	86 95       	lsr	r24
 7fe:	71 05       	cpc	r23, r1
 800:	61 05       	cpc	r22, r1
 802:	08 94       	sec
 804:	08 95       	ret

00000806 <__fp_zero>:
 806:	e8 94       	clt

00000808 <__fp_szero>:
 808:	bb 27       	eor	r27, r27
 80a:	66 27       	eor	r22, r22
 80c:	77 27       	eor	r23, r23
 80e:	cb 01       	movw	r24, r22
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__mulsf3>:
 814:	0e 94 1d 04 	call	0x83a	; 0x83a <__mulsf3x>
 818:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_round>
 81c:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_pscA>
 820:	38 f0       	brcs	.+14     	; 0x830 <__mulsf3+0x1c>
 822:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_pscB>
 826:	20 f0       	brcs	.+8      	; 0x830 <__mulsf3+0x1c>
 828:	95 23       	and	r25, r21
 82a:	11 f0       	breq	.+4      	; 0x830 <__mulsf3+0x1c>
 82c:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_inf>
 830:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_nan>
 834:	11 24       	eor	r1, r1
 836:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_szero>

0000083a <__mulsf3x>:
 83a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fp_split3>
 83e:	70 f3       	brcs	.-36     	; 0x81c <__mulsf3+0x8>

00000840 <__mulsf3_pse>:
 840:	95 9f       	mul	r25, r21
 842:	c1 f3       	breq	.-16     	; 0x834 <__mulsf3+0x20>
 844:	95 0f       	add	r25, r21
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	55 1f       	adc	r21, r21
 84a:	62 9f       	mul	r22, r18
 84c:	f0 01       	movw	r30, r0
 84e:	72 9f       	mul	r23, r18
 850:	bb 27       	eor	r27, r27
 852:	f0 0d       	add	r31, r0
 854:	b1 1d       	adc	r27, r1
 856:	63 9f       	mul	r22, r19
 858:	aa 27       	eor	r26, r26
 85a:	f0 0d       	add	r31, r0
 85c:	b1 1d       	adc	r27, r1
 85e:	aa 1f       	adc	r26, r26
 860:	64 9f       	mul	r22, r20
 862:	66 27       	eor	r22, r22
 864:	b0 0d       	add	r27, r0
 866:	a1 1d       	adc	r26, r1
 868:	66 1f       	adc	r22, r22
 86a:	82 9f       	mul	r24, r18
 86c:	22 27       	eor	r18, r18
 86e:	b0 0d       	add	r27, r0
 870:	a1 1d       	adc	r26, r1
 872:	62 1f       	adc	r22, r18
 874:	73 9f       	mul	r23, r19
 876:	b0 0d       	add	r27, r0
 878:	a1 1d       	adc	r26, r1
 87a:	62 1f       	adc	r22, r18
 87c:	83 9f       	mul	r24, r19
 87e:	a0 0d       	add	r26, r0
 880:	61 1d       	adc	r22, r1
 882:	22 1f       	adc	r18, r18
 884:	74 9f       	mul	r23, r20
 886:	33 27       	eor	r19, r19
 888:	a0 0d       	add	r26, r0
 88a:	61 1d       	adc	r22, r1
 88c:	23 1f       	adc	r18, r19
 88e:	84 9f       	mul	r24, r20
 890:	60 0d       	add	r22, r0
 892:	21 1d       	adc	r18, r1
 894:	82 2f       	mov	r24, r18
 896:	76 2f       	mov	r23, r22
 898:	6a 2f       	mov	r22, r26
 89a:	11 24       	eor	r1, r1
 89c:	9f 57       	subi	r25, 0x7F	; 127
 89e:	50 40       	sbci	r21, 0x00	; 0
 8a0:	9a f0       	brmi	.+38     	; 0x8c8 <__mulsf3_pse+0x88>
 8a2:	f1 f0       	breq	.+60     	; 0x8e0 <__mulsf3_pse+0xa0>
 8a4:	88 23       	and	r24, r24
 8a6:	4a f0       	brmi	.+18     	; 0x8ba <__mulsf3_pse+0x7a>
 8a8:	ee 0f       	add	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	bb 1f       	adc	r27, r27
 8ae:	66 1f       	adc	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	91 50       	subi	r25, 0x01	; 1
 8b6:	50 40       	sbci	r21, 0x00	; 0
 8b8:	a9 f7       	brne	.-22     	; 0x8a4 <__mulsf3_pse+0x64>
 8ba:	9e 3f       	cpi	r25, 0xFE	; 254
 8bc:	51 05       	cpc	r21, r1
 8be:	80 f0       	brcs	.+32     	; 0x8e0 <__mulsf3_pse+0xa0>
 8c0:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_inf>
 8c4:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_szero>
 8c8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ca:	e4 f3       	brlt	.-8      	; 0x8c4 <__mulsf3_pse+0x84>
 8cc:	98 3e       	cpi	r25, 0xE8	; 232
 8ce:	d4 f3       	brlt	.-12     	; 0x8c4 <__mulsf3_pse+0x84>
 8d0:	86 95       	lsr	r24
 8d2:	77 95       	ror	r23
 8d4:	67 95       	ror	r22
 8d6:	b7 95       	ror	r27
 8d8:	f7 95       	ror	r31
 8da:	e7 95       	ror	r30
 8dc:	9f 5f       	subi	r25, 0xFF	; 255
 8de:	c1 f7       	brne	.-16     	; 0x8d0 <__mulsf3_pse+0x90>
 8e0:	fe 2b       	or	r31, r30
 8e2:	88 0f       	add	r24, r24
 8e4:	91 1d       	adc	r25, r1
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	97 f9       	bld	r25, 7
 8ec:	08 95       	ret

000008ee <_exit>:
 8ee:	f8 94       	cli

000008f0 <__stop_program>:
 8f0:	ff cf       	rjmp	.-2      	; 0x8f0 <__stop_program>
