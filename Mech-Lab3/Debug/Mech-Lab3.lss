
Mech-Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000aa4  00000b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800144  00800144  00000b7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a6  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba0  00000000  00000000  00002522  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c86  00000000  00000000  000030c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca4  00000000  00000000  000046ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000535e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3c       	cpi	r26, 0xC9	; 201
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  9e:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <avr/io.h>
#include "ADC.h"

void adc_init() {	
	//Set reference to built in channels
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Enable ADC w/ prescaler
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  b2:	08 95       	ret

000000b4 <adc_read>:
}

uint16_t adc_read(uint8_t ch) {
	//select channel to read
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	//start conversion
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
  cc:	80 81       	ld	r24, Z
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <adc_read+0x18>
	//return result
	return (ADC);
  d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  da:	08 95       	ret

000000dc <digital_filter_init>:
float a[5] = {1.000000000000000,  -3.671729089161935, 5.067998386734189, -3.115966925201744, 0.719910327291871};	
uint8_t i;

/* Initialization */
void digital_filter_init(){
	rb_initialize_F(&inputs);
  dc:	87 e8       	ldi	r24, 0x87	; 135
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <rb_initialize_F>
	rb_initialize_F(&outputs);
  e4:	85 e4       	ldi	r24, 0x45	; 69
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <rb_initialize_F>
	
	for(i = 0; i <= 15; i++){	
  ec:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
		rb_push_front_F(&inputs, 0);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	ba 01       	movw	r22, r20
  f6:	87 e8       	ldi	r24, 0x87	; 135
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 e6 02 	call	0x5cc	; 0x5cc <rb_push_front_F>
		rb_push_front_F(&outputs, 0);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	ba 01       	movw	r22, r20
 104:	85 e4       	ldi	r24, 0x45	; 69
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 e6 02 	call	0x5cc	; 0x5cc <rb_push_front_F>
/* Initialization */
void digital_filter_init(){
	rb_initialize_F(&inputs);
	rb_initialize_F(&outputs);
	
	for(i = 0; i <= 15; i++){	
 10c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	58 f3       	brcs	.-42     	; 0xf0 <digital_filter_init+0x14>
		rb_push_front_F(&inputs, 0);
		rb_push_front_F(&outputs, 0);
	}
	
	return;
}
 11a:	08 95       	ret

0000011c <wrapPos>:
	rb_push_front_F(&outputs, newOutput);
	return newOutput;
}

void wrapPos(float newInput)
{
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	6b 01       	movw	r12, r22
 12a:	7c 01       	movw	r14, r24
	if(rb_get_F(&outputs,0) - newInput > 180)
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	85 e4       	ldi	r24, 0x45	; 69
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 136:	a7 01       	movw	r20, r14
 138:	96 01       	movw	r18, r12
 13a:	0e 94 ba 03 	call	0x774	; 0x774 <__subsf3>
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	44 e3       	ldi	r20, 0x34	; 52
 144:	53 e4       	ldi	r21, 0x43	; 67
 146:	0e 94 de 04 	call	0x9bc	; 0x9bc <__gesf2>
 14a:	18 16       	cp	r1, r24
 14c:	3c f1       	brlt	.+78     	; 0x19c <wrapPos+0x80>
 14e:	31 c0       	rjmp	.+98     	; 0x1b2 <wrapPos+0x96>
	{
		for(int i = 0; i <= rb_length_F(&outputs); i++)
		{
			rb_set_F(&inputs, i, rb_get_F(&inputs, i) - 360);
 150:	6c 2f       	mov	r22, r28
 152:	87 e8       	ldi	r24, 0x87	; 135
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	44 eb       	ldi	r20, 0xB4	; 180
 160:	53 e4       	ldi	r21, 0x43	; 67
 162:	0e 94 ba 03 	call	0x774	; 0x774 <__subsf3>
 166:	9b 01       	movw	r18, r22
 168:	ac 01       	movw	r20, r24
 16a:	6c 2f       	mov	r22, r28
 16c:	87 e8       	ldi	r24, 0x87	; 135
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 45 03 	call	0x68a	; 0x68a <rb_set_F>
			rb_set_F(&outputs, i, rb_get_F(&outputs, i) - 360);
 174:	6c 2f       	mov	r22, r28
 176:	85 e4       	ldi	r24, 0x45	; 69
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	44 eb       	ldi	r20, 0xB4	; 180
 184:	53 e4       	ldi	r21, 0x43	; 67
 186:	0e 94 ba 03 	call	0x774	; 0x774 <__subsf3>
 18a:	9b 01       	movw	r18, r22
 18c:	ac 01       	movw	r20, r24
 18e:	6c 2f       	mov	r22, r28
 190:	85 e4       	ldi	r24, 0x45	; 69
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 45 03 	call	0x68a	; 0x68a <rb_set_F>

void wrapPos(float newInput)
{
	if(rb_get_F(&outputs,0) - newInput > 180)
	{
		for(int i = 0; i <= rb_length_F(&outputs); i++)
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <wrapPos+0x84>
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	85 e4       	ldi	r24, 0x45	; 69
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <rb_length_F>
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	8c 17       	cp	r24, r28
 1ac:	9d 07       	cpc	r25, r29
 1ae:	84 f6       	brge	.-96     	; 0x150 <wrapPos+0x34>
 1b0:	42 c0       	rjmp	.+132    	; 0x236 <wrapPos+0x11a>
		{
			rb_set_F(&inputs, i, rb_get_F(&inputs, i) - 360);
			rb_set_F(&outputs, i, rb_get_F(&outputs, i) - 360);
		}
	}
	else if(rb_get_F(&outputs,0) - newInput < -180)
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	85 e4       	ldi	r24, 0x45	; 69
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 1bc:	a7 01       	movw	r20, r14
 1be:	96 01       	movw	r18, r12
 1c0:	0e 94 ba 03 	call	0x774	; 0x774 <__subsf3>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	44 e3       	ldi	r20, 0x34	; 52
 1ca:	53 ec       	ldi	r21, 0xC3	; 195
 1cc:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 1d0:	88 23       	and	r24, r24
 1d2:	3c f1       	brlt	.+78     	; 0x222 <wrapPos+0x106>
 1d4:	30 c0       	rjmp	.+96     	; 0x236 <wrapPos+0x11a>
	{
		for(int i = 0; i <= rb_length_F(&outputs); i++)
		{
			rb_set_F(&inputs, i, rb_get_F(&inputs, i) + 360);
 1d6:	6c 2f       	mov	r22, r28
 1d8:	87 e8       	ldi	r24, 0x87	; 135
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	44 eb       	ldi	r20, 0xB4	; 180
 1e6:	53 e4       	ldi	r21, 0x43	; 67
 1e8:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
 1ec:	9b 01       	movw	r18, r22
 1ee:	ac 01       	movw	r20, r24
 1f0:	6c 2f       	mov	r22, r28
 1f2:	87 e8       	ldi	r24, 0x87	; 135
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 45 03 	call	0x68a	; 0x68a <rb_set_F>
			rb_set_F(&outputs, i, rb_get_F(&outputs, i) + 360);
 1fa:	6c 2f       	mov	r22, r28
 1fc:	85 e4       	ldi	r24, 0x45	; 69
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	44 eb       	ldi	r20, 0xB4	; 180
 20a:	53 e4       	ldi	r21, 0x43	; 67
 20c:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
 210:	9b 01       	movw	r18, r22
 212:	ac 01       	movw	r20, r24
 214:	6c 2f       	mov	r22, r28
 216:	85 e4       	ldi	r24, 0x45	; 69
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 45 03 	call	0x68a	; 0x68a <rb_set_F>
			rb_set_F(&outputs, i, rb_get_F(&outputs, i) - 360);
		}
	}
	else if(rb_get_F(&outputs,0) - newInput < -180)
	{
		for(int i = 0; i <= rb_length_F(&outputs); i++)
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	02 c0       	rjmp	.+4      	; 0x226 <wrapPos+0x10a>
 222:	c0 e0       	ldi	r28, 0x00	; 0
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	85 e4       	ldi	r24, 0x45	; 69
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <rb_length_F>
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	8c 17       	cp	r24, r28
 232:	9d 07       	cpc	r25, r29
 234:	84 f6       	brge	.-96     	; 0x1d6 <wrapPos+0xba>
		{
			rb_set_F(&inputs, i, rb_get_F(&inputs, i) + 360);
			rb_set_F(&outputs, i, rb_get_F(&outputs, i) + 360);
		}
	}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	08 95       	ret

00000244 <filterValue>:
	}
	
	return;
}

float filterValue(float newInput){
 244:	8f 92       	push	r8
 246:	9f 92       	push	r9
 248:	af 92       	push	r10
 24a:	bf 92       	push	r11
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	cf 93       	push	r28
 256:	6b 01       	movw	r12, r22
 258:	7c 01       	movw	r14, r24
	wrapPos(newInput);
 25a:	0e 94 8e 00 	call	0x11c	; 0x11c <wrapPos>
	rb_pop_back_F(&inputs);
 25e:	87 e8       	ldi	r24, 0x87	; 135
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 01 03 	call	0x602	; 0x602 <rb_pop_back_F>
	rb_push_front_F(&inputs, newInput);
 266:	b7 01       	movw	r22, r14
 268:	a6 01       	movw	r20, r12
 26a:	87 e8       	ldi	r24, 0x87	; 135
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <rb_push_front_F>
	float newOutput = 0.0;
	for(i=0; i <= 4; i++){	
 272:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	c1 2c       	mov	r12, r1
 27a:	d1 2c       	mov	r13, r1
 27c:	76 01       	movw	r14, r12
 27e:	c1 e0       	ldi	r28, 0x01	; 1
		newOutput += b[i]*rb_get_F(&inputs,i);
 280:	e6 2f       	mov	r30, r22
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	ec 5e       	subi	r30, 0xEC	; 236
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	80 80       	ld	r8, Z
 292:	91 80       	ldd	r9, Z+1	; 0x01
 294:	a2 80       	ldd	r10, Z+2	; 0x02
 296:	b3 80       	ldd	r11, Z+3	; 0x03
 298:	87 e8       	ldi	r24, 0x87	; 135
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	c5 01       	movw	r24, r10
 2a6:	b4 01       	movw	r22, r8
 2a8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__mulsf3>
 2ac:	9b 01       	movw	r18, r22
 2ae:	ac 01       	movw	r20, r24
 2b0:	c7 01       	movw	r24, r14
 2b2:	b6 01       	movw	r22, r12
 2b4:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
 2b8:	6b 01       	movw	r12, r22
 2ba:	7c 01       	movw	r14, r24
		if (i>0){
 2bc:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
 2c0:	66 23       	and	r22, r22
 2c2:	41 f1       	breq	.+80     	; 0x314 <filterValue+0xd0>
			newOutput -= a[i]*rb_get_F(&outputs,i-1);
 2c4:	e6 2f       	mov	r30, r22
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	e0 50       	subi	r30, 0x00	; 0
 2d2:	ff 4f       	sbci	r31, 0xFF	; 255
 2d4:	80 80       	ld	r8, Z
 2d6:	91 80       	ldd	r9, Z+1	; 0x01
 2d8:	a2 80       	ldd	r10, Z+2	; 0x02
 2da:	b3 80       	ldd	r11, Z+3	; 0x03
 2dc:	61 50       	subi	r22, 0x01	; 1
 2de:	85 e4       	ldi	r24, 0x45	; 69
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 2c 03 	call	0x658	; 0x658 <rb_get_F>
 2e6:	9b 01       	movw	r18, r22
 2e8:	ac 01       	movw	r20, r24
 2ea:	c5 01       	movw	r24, r10
 2ec:	b4 01       	movw	r22, r8
 2ee:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__mulsf3>
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	0e 94 ba 03 	call	0x774	; 0x774 <__subsf3>
 2fe:	6b 01       	movw	r12, r22
 300:	7c 01       	movw	r14, r24
float filterValue(float newInput){
	wrapPos(newInput);
	rb_pop_back_F(&inputs);
	rb_push_front_F(&inputs, newInput);
	float newOutput = 0.0;
	for(i=0; i <= 4; i++){	
 302:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
 306:	6f 5f       	subi	r22, 0xFF	; 255
 308:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__data_end>
 30c:	65 30       	cpi	r22, 0x05	; 5
 30e:	08 f4       	brcc	.+2      	; 0x312 <filterValue+0xce>
 310:	b7 cf       	rjmp	.-146    	; 0x280 <filterValue+0x3c>
 312:	04 c0       	rjmp	.+8      	; 0x31c <filterValue+0xd8>
 314:	c0 93 44 01 	sts	0x0144, r28	; 0x800144 <__data_end>
 318:	6c 2f       	mov	r22, r28
 31a:	b2 cf       	rjmp	.-156    	; 0x280 <filterValue+0x3c>
		newOutput += b[i]*rb_get_F(&inputs,i);
		if (i>0){
			newOutput -= a[i]*rb_get_F(&outputs,i-1);
		}
	}
	newOutput *= a[0];
 31c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 320:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 324:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 328:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 32c:	c7 01       	movw	r24, r14
 32e:	b6 01       	movw	r22, r12
 330:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__mulsf3>
 334:	6b 01       	movw	r12, r22
 336:	7c 01       	movw	r14, r24
	rb_pop_back_F(&outputs);
 338:	85 e4       	ldi	r24, 0x45	; 69
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 01 03 	call	0x602	; 0x602 <rb_pop_back_F>
	rb_push_front_F(&outputs, newOutput);
 340:	b7 01       	movw	r22, r14
 342:	a6 01       	movw	r20, r12
 344:	85 e4       	ldi	r24, 0x45	; 69
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 e6 02 	call	0x5cc	; 0x5cc <rb_push_front_F>
	return newOutput;
}
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	cf 91       	pop	r28
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	df 90       	pop	r13
 358:	cf 90       	pop	r12
 35a:	bf 90       	pop	r11
 35c:	af 90       	pop	r10
 35e:	9f 90       	pop	r9
 360:	8f 90       	pop	r8
 362:	08 95       	ret

00000364 <USART_Init>:
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		while(!(NEW_MSG)); //wait for new byte
		a.asChar[i] = receive_byte(); //collect byte
	}
	return a.asFloat; //return float value
}
 364:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 368:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 36c:	88 e1       	ldi	r24, 0x18	; 24
 36e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 378:	08 95       	ret

0000037a <print_byte>:

void print_byte(uint8_t value){
	while(!(UCSR0A & (1<<UDRE0)));
 37a:	e0 ec       	ldi	r30, 0xC0	; 192
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	90 81       	ld	r25, Z
 380:	95 ff       	sbrs	r25, 5
 382:	fd cf       	rjmp	.-6      	; 0x37e <print_byte+0x4>
	//while(!(TRANSMIT_READY)); //after transmit line is ready
	UDR0 = value; //set transmit register to value
 384:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 388:	08 95       	ret

0000038a <print_float>:
}

void print_float(float value){ 
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	00 d0       	rcall	.+0      	; 0x398 <print_float+0xe>
 398:	00 d0       	rcall	.+0      	; 0x39a <print_float+0x10>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
 39e:	69 83       	std	Y+1, r22	; 0x01
 3a0:	7a 83       	std	Y+2, r23	; 0x02
 3a2:	8b 83       	std	Y+3, r24	; 0x03
 3a4:	9c 83       	std	Y+4, r25	; 0x04
 3a6:	8e 01       	movw	r16, r28
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
 3ac:	7e 01       	movw	r14, r28
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	e8 0e       	add	r14, r24
 3b2:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		print_byte(b.asChar[i]); //send each byte
 3b4:	f8 01       	movw	r30, r16
 3b6:	81 91       	ld	r24, Z+
 3b8:	8f 01       	movw	r16, r30
 3ba:	0e 94 bd 01 	call	0x37a	; 0x37a <print_byte>
}

void print_float(float value){ 
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
 3be:	0e 15       	cp	r16, r14
 3c0:	1f 05       	cpc	r17, r15
 3c2:	c1 f7       	brne	.-16     	; 0x3b4 <print_float+0x2a>
		print_byte(b.asChar[i]); //send each byte
	}
}
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	08 95       	ret

000003da <fastPWM_init>:
}

void fastPWM_init()
{
	// set Fast PWM mode on Timer 2 non-inverting (just add (1 << COM2A0) for inverting
	TCCR2A |= (1 << WGM20)|(1 << WGM21)|(1 << COM2A1);
 3da:	e0 eb       	ldi	r30, 0xB0	; 176
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	83 68       	ori	r24, 0x83	; 131
 3e2:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20)|(1 << CS21)|(1 << CS22);
 3e4:	e1 eb       	ldi	r30, 0xB1	; 177
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	87 60       	ori	r24, 0x07	; 7
 3ec:	80 83       	st	Z, r24
 3ee:	08 95       	ret

000003f0 <main>:
	float asFloat;
	char asChars[4];
};*/

int main(void)
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	a5 97       	sbiw	r28, 0x25	; 37
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
	//struct Ring_Buffer_C output_queue;
	USART_Init(MYUBRR);
 404:	87 e6       	ldi	r24, 0x67	; 103
 406:	0e 94 b2 01 	call	0x364	; 0x364 <USART_Init>
    //rb_initialize_C(&output_queue);

	timer0_init(1024,155);
 40a:	6b e9       	ldi	r22, 0x9B	; 155
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	0e 94 56 03 	call	0x6ac	; 0x6ac <timer0_init>
	timer1_init(0,15999);
 416:	6f e7       	ldi	r22, 0x7F	; 127
 418:	7e e3       	ldi	r23, 0x3E	; 62
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 80 03 	call	0x700	; 0x700 <timer1_init>
	fastPWM_init();
 422:	0e 94 ed 01 	call	0x3da	; 0x3da <fastPWM_init>
	adc_init();
 426:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	digital_filter_init(0);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 6e 00 	call	0xdc	; 0xdc <digital_filter_init>
	
	//Set AI0 to Output and rest as Input
	DDRC |= 0b00000001;
 432:	38 9a       	sbi	0x07, 0	; 7
	//Set pin 11,13, and 8 as output for PWM, Dir, and enable, respectively
	DDRB |= 0b00101001;
 434:	84 b1       	in	r24, 0x04	; 4
 436:	89 62       	ori	r24, 0x29	; 41
 438:	84 b9       	out	0x04, r24	; 4
	
	//Set output to 1 to power sensor
	PORTC |= 0b00000001;
 43a:	40 9a       	sbi	0x08, 0	; 8
	//Set enable pin as high
	PORTB |= 0b00000001;
 43c:	28 9a       	sbi	0x05, 0	; 5
	float filteredPos = 0;
	//union floatChars printVal;
	int vel_des[3] = {24, 0, -24};
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
	enum states{STOP = 0, CW = 1, CCW = 2} stateCur = STOP, stateLast = CW;
	float convertCoeff[] = {-354.5305, 7.2116, -0.0543, 1.9698E-4, -3.5356E-7, 3.0609E-10, -1.0193E-13};
 43e:	8c e1       	ldi	r24, 0x1C	; 28
 440:	e8 e2       	ldi	r30, 0x28	; 40
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	de 01       	movw	r26, r28
 446:	11 96       	adiw	r26, 0x01	; 1
 448:	01 90       	ld	r0, Z+
 44a:	0d 92       	st	X+, r0
 44c:	8a 95       	dec	r24
 44e:	e1 f7       	brne	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	float tempSum;
	float voltTemp = 0;
	int duty = 50;
 450:	82 e3       	ldi	r24, 0x32	; 50
 452:	8f 8f       	std	Y+31, r24	; 0x1f
	float angVel = 0;
	float filteredPos = 0;
	//union floatChars printVal;
	int vel_des[3] = {24, 0, -24};
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
	enum states{STOP = 0, CW = 1, CCW = 2} stateCur = STOP, stateLast = CW;
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	9d a3       	std	Y+37, r25	; 0x25
 458:	1c a2       	std	Y+36, r1	; 0x24
	float angPosLast = 0;
	float angVel = 0;
	float filteredPos = 0;
	//union floatChars printVal;
	int vel_des[3] = {24, 0, -24};
	int timer0Count = 0; //change to volatile if issues, I'm thinking the increment will keep this from being an issue though
 45a:	1e 8e       	std	Y+30, r1	; 0x1e
 45c:	1d 8e       	std	Y+29, r1	; 0x1d
	//Sampling frequency for converting to velocity, 1/0.001
	float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
	float angPosLast = 0;
	float angVel = 0;
 45e:	81 2c       	mov	r8, r1
 460:	91 2c       	mov	r9, r1
 462:	54 01       	movw	r10, r8
	
	//Sampling frequency for converting to velocity, 1/0.001
	float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
	float angPosLast = 0;
 464:	18 a2       	std	Y+32, r1	; 0x20
 466:	19 a2       	std	Y+33, r1	; 0x21
 468:	1a a2       	std	Y+34, r1	; 0x22
 46a:	1b a2       	std	Y+35, r1	; 0x23
 46c:	1e 01       	movw	r2, r28
 46e:	ed e1       	ldi	r30, 0x1D	; 29
 470:	2e 0e       	add	r2, r30
 472:	31 1c       	adc	r3, r1
	float voltTemp = 0;
	int duty = 50;

    while (1) 
    {
		OCR2A = duty; // deadband at about 10
 474:	8f 8d       	ldd	r24, Y+31	; 0x1f
 476:	e3 eb       	ldi	r30, 0xB3	; 179
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 83       	st	Z, r24
		//if TIMER0_flag
		if(TIFR0 & (1 << OCF0A))
 47c:	a9 9b       	sbis	0x15, 1	; 21
 47e:	39 c0       	rjmp	.+114    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
		{
			timer0Count++;
 480:	ed 8d       	ldd	r30, Y+29	; 0x1d
 482:	fe 8d       	ldd	r31, Y+30	; 0x1e
 484:	31 96       	adiw	r30, 0x01	; 1
 486:	fe 8f       	std	Y+30, r31	; 0x1e
 488:	ed 8f       	std	Y+29, r30	; 0x1d
			if(timer0Count == 100)
 48a:	e4 36       	cpi	r30, 0x64	; 100
 48c:	f1 05       	cpc	r31, r1
 48e:	61 f5       	brne	.+88     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			{
				// Check for next action
				if(stateCur == 0 && stateLast == 1)
 490:	fc a1       	ldd	r31, Y+36	; 0x24
 492:	f1 11       	cpse	r31, r1
 494:	14 c0       	rjmp	.+40     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 496:	8d a1       	ldd	r24, Y+37	; 0x25
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	c1 f0       	breq	.+48     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
				{
					stateLast = stateCur;
					stateCur = CCW;
					setNewPWM(vel_des[2]); 
					duty = 50;
				} else if(stateCur == 0 && stateLast == 2)
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	f9 f4       	brne	.+62     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>

void setNewPWM(int vel_des)
{
	if(vel_des > 0)
	{
		PORTB |= (1 << PINB5);
 4a0:	2d 9a       	sbi	0x05, 5	; 5
		TCCR2A &= ~(1 << COM2A0);
 4a2:	e0 eb       	ldi	r30, 0xB0	; 176
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 7b       	andi	r24, 0xBF	; 191
 4aa:	80 83       	st	Z, r24
 4ac:	fc a1       	ldd	r31, Y+36	; 0x24
 4ae:	fd a3       	std	Y+37, r31	; 0x25
				} else if(stateCur == 0 && stateLast == 2)
				{
					stateLast = stateCur;
					stateCur = CW;
					setNewPWM(vel_des[0]);
					duty = 50;
 4b0:	82 e3       	ldi	r24, 0x32	; 50
 4b2:	8f 8f       	std	Y+31, r24	; 0x1f
					setNewPWM(vel_des[2]); 
					duty = 50;
				} else if(stateCur == 0 && stateLast == 2)
				{
					stateLast = stateCur;
					stateCur = CW;
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	9c a3       	std	Y+36, r25	; 0x24
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
				}
				timer0Count = 0;
 4b8:	1e 8e       	std	Y+30, r1	; 0x1e
 4ba:	1d 8e       	std	Y+29, r1	; 0x1d
 4bc:	15 c0       	rjmp	.+42     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4be:	ec a1       	ldd	r30, Y+36	; 0x24
 4c0:	ed a3       	std	Y+37, r30	; 0x25
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
 4c2:	1f 8e       	std	Y+31, r1	; 0x1f
					setNewPWM(vel_des[0]);
					duty = 50;
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
 4c4:	1c a2       	std	Y+36, r1	; 0x24
					setNewPWM(vel_des[1]);
					duty = 0;
				}
				timer0Count = 0;
 4c6:	1e 8e       	std	Y+30, r1	; 0x1e
 4c8:	1d 8e       	std	Y+29, r1	; 0x1d
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4cc:	fc a1       	ldd	r31, Y+36	; 0x24
 4ce:	fd a3       	std	Y+37, r31	; 0x25
				if(stateCur == 0 && stateLast == 1)
				{
					stateLast = stateCur;
					stateCur = CCW;
					setNewPWM(vel_des[2]); 
					duty = 50;
 4d0:	82 e3       	ldi	r24, 0x32	; 50
 4d2:	8f 8f       	std	Y+31, r24	; 0x1f
			{
				// Check for next action
				if(stateCur == 0 && stateLast == 1)
				{
					stateLast = stateCur;
					stateCur = CCW;
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	9c a3       	std	Y+36, r25	; 0x24
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
				}
				timer0Count = 0;
 4d8:	1e 8e       	std	Y+30, r1	; 0x1e
 4da:	1d 8e       	std	Y+29, r1	; 0x1d
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4de:	ec a1       	ldd	r30, Y+36	; 0x24
 4e0:	ed a3       	std	Y+37, r30	; 0x25
				} else
				{
					stateLast = stateCur;
					stateCur = STOP;
					setNewPWM(vel_des[1]);
					duty = 0;
 4e2:	1f 8e       	std	Y+31, r1	; 0x1f
				}
				timer0Count = 0;
 4e4:	1e 8e       	std	Y+30, r1	; 0x1e
 4e6:	1d 8e       	std	Y+29, r1	; 0x1d
			/*printVal.asFloat = 500; //edit so we don't drop readings during prints
			printVal.asFloat = angPos;
			for(int i = 0; i < 4; i ++){
				rb_push_back_C(&output_queue, printVal.asChars[i]);
			}*/
			print_float(angVel);
 4e8:	c5 01       	movw	r24, r10
 4ea:	b4 01       	movw	r22, r8
 4ec:	0e 94 c5 01 	call	0x38a	; 0x38a <print_float>
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 4f0:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if(TIFR1 & (1 << OCF1A))
 4f2:	b1 9b       	sbis	0x16, 1	; 22
 4f4:	bf cf       	rjmp	.-130    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		{
			//read voltage 
			volt = adc_read(1);	
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 4fc:	bc 01       	movw	r22, r24
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 506:	76 2e       	mov	r7, r22
 508:	67 2e       	mov	r6, r23
 50a:	58 2e       	mov	r5, r24
 50c:	49 2e       	mov	r4, r25
			voltTemp = volt;
			//convert to position in radians
			tempSum = convertCoeff[0];
 50e:	c9 80       	ldd	r12, Y+1	; 0x01
 510:	da 80       	ldd	r13, Y+2	; 0x02
 512:	eb 80       	ldd	r14, Y+3	; 0x03
 514:	fc 80       	ldd	r15, Y+4	; 0x04
 516:	4e 01       	movw	r8, r28
 518:	f5 e0       	ldi	r31, 0x05	; 5
 51a:	8f 0e       	add	r8, r31
 51c:	91 1c       	adc	r9, r1
		//if TIMER1_flag
		if(TIFR1 & (1 << OCF1A))
		{
			//read voltage 
			volt = adc_read(1);	
			voltTemp = volt;
 51e:	06 2f       	mov	r16, r22
 520:	b7 2e       	mov	r11, r23
 522:	a8 2e       	mov	r10, r24
 524:	19 2f       	mov	r17, r25
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
				tempSum += convertCoeff[i]*voltTemp;
 526:	f4 01       	movw	r30, r8
 528:	61 91       	ld	r22, Z+
 52a:	71 91       	ld	r23, Z+
 52c:	81 91       	ld	r24, Z+
 52e:	91 91       	ld	r25, Z+
 530:	4f 01       	movw	r8, r30
 532:	20 2f       	mov	r18, r16
 534:	3b 2d       	mov	r19, r11
 536:	4a 2d       	mov	r20, r10
 538:	51 2f       	mov	r21, r17
 53a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__mulsf3>
 53e:	9b 01       	movw	r18, r22
 540:	ac 01       	movw	r20, r24
 542:	c7 01       	movw	r24, r14
 544:	b6 01       	movw	r22, r12
 546:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
 54a:	6b 01       	movw	r12, r22
 54c:	7c 01       	movw	r14, r24
				voltTemp *= volt;
 54e:	27 2d       	mov	r18, r7
 550:	36 2d       	mov	r19, r6
 552:	45 2d       	mov	r20, r5
 554:	54 2d       	mov	r21, r4
 556:	60 2f       	mov	r22, r16
 558:	7b 2d       	mov	r23, r11
 55a:	8a 2d       	mov	r24, r10
 55c:	91 2f       	mov	r25, r17
 55e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__mulsf3>
 562:	06 2f       	mov	r16, r22
 564:	b7 2e       	mov	r11, r23
 566:	a8 2e       	mov	r10, r24
 568:	19 2f       	mov	r17, r25
			volt = adc_read(1);	
			voltTemp = volt;
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
 56a:	82 14       	cp	r8, r2
 56c:	93 04       	cpc	r9, r3
 56e:	d9 f6       	brne	.-74     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
			}
			//wrap result
			angPos = tempSum;

			//filter position
			filteredPos = filterValue(angPos);
 570:	c7 01       	movw	r24, r14
 572:	b6 01       	movw	r22, r12
 574:	0e 94 22 01 	call	0x244	; 0x244 <filterValue>
 578:	f6 2e       	mov	r15, r22
 57a:	07 2f       	mov	r16, r23
 57c:	18 2f       	mov	r17, r24
 57e:	e9 2e       	mov	r14, r25
			
			//convert to velocity
			//angVel = (angPos - angPosLast) *0.00277778*sampPer; // rev/s
			angVel = (filteredPos - angPosLast) *sampPer; // deg/s
 580:	28 a1       	ldd	r18, Y+32	; 0x20
 582:	39 a1       	ldd	r19, Y+33	; 0x21
 584:	4a a1       	ldd	r20, Y+34	; 0x22
 586:	5b a1       	ldd	r21, Y+35	; 0x23
 588:	0e 94 ba 03 	call	0x774	; 0x774 <__subsf3>
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	4a e7       	ldi	r20, 0x7A	; 122
 592:	54 e4       	ldi	r21, 0x44	; 68
 594:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__mulsf3>
 598:	4b 01       	movw	r8, r22
 59a:	5c 01       	movw	r10, r24
			
			//filter velocity
			//filteredVel = filterValue(angVel);
			
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 59c:	b1 9a       	sbi	0x16, 1	; 22
			//convert to velocity
			//angVel = (angPos - angPosLast) *0.00277778*sampPer; // rev/s
			angVel = (filteredPos - angPosLast) *sampPer; // deg/s
			
			//add angPos to queue
			angPosLast = filteredPos;
 59e:	f8 a2       	std	Y+32, r15	; 0x20
 5a0:	09 a3       	std	Y+33, r16	; 0x21
 5a2:	1a a3       	std	Y+34, r17	; 0x22
 5a4:	eb a2       	std	Y+35, r14	; 0x23
 5a6:	66 cf       	rjmp	.-308    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

000005a8 <rb_initialize_F>:
        return p_buf->buffer[index]; // update
    }
    else{
        return 0;
    }
}
 5a8:	fc 01       	movw	r30, r24
 5aa:	e0 5c       	subi	r30, 0xC0	; 192
 5ac:	ff 4f       	sbci	r31, 0xFF	; 255
 5ae:	10 82       	st	Z, r1
 5b0:	31 96       	adiw	r30, 0x01	; 1
 5b2:	10 82       	st	Z, r1
 5b4:	08 95       	ret

000005b6 <rb_length_F>:
 5b6:	dc 01       	movw	r26, r24
 5b8:	af 5b       	subi	r26, 0xBF	; 191
 5ba:	bf 4f       	sbci	r27, 0xFF	; 255
 5bc:	fc 01       	movw	r30, r24
 5be:	e0 5c       	subi	r30, 0xC0	; 192
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	8c 91       	ld	r24, X
 5c4:	90 81       	ld	r25, Z
 5c6:	89 1b       	sub	r24, r25
 5c8:	8f 70       	andi	r24, 0x0F	; 15
 5ca:	08 95       	ret

000005cc <rb_push_front_F>:
 5cc:	9c 01       	movw	r18, r24
 5ce:	fc 01       	movw	r30, r24
 5d0:	e0 5c       	subi	r30, 0xC0	; 192
 5d2:	ff 4f       	sbci	r31, 0xFF	; 255
 5d4:	90 81       	ld	r25, Z
 5d6:	91 50       	subi	r25, 0x01	; 1
 5d8:	9f 70       	andi	r25, 0x0F	; 15
 5da:	90 83       	st	Z, r25
 5dc:	31 96       	adiw	r30, 0x01	; 1
 5de:	80 81       	ld	r24, Z
 5e0:	98 13       	cpse	r25, r24
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <rb_push_front_F+0x20>
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	89 0f       	add	r24, r25
 5e8:	8f 70       	andi	r24, 0x0F	; 15
 5ea:	80 83       	st	Z, r24
 5ec:	f9 01       	movw	r30, r18
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	98 9f       	mul	r25, r24
 5f2:	e0 0d       	add	r30, r0
 5f4:	f1 1d       	adc	r31, r1
 5f6:	11 24       	eor	r1, r1
 5f8:	40 83       	st	Z, r20
 5fa:	51 83       	std	Z+1, r21	; 0x01
 5fc:	62 83       	std	Z+2, r22	; 0x02
 5fe:	73 83       	std	Z+3, r23	; 0x03
 600:	08 95       	ret

00000602 <rb_pop_back_F>:
 602:	9c 01       	movw	r18, r24
 604:	fc 01       	movw	r30, r24
 606:	ef 5b       	subi	r30, 0xBF	; 191
 608:	ff 4f       	sbci	r31, 0xFF	; 255
 60a:	90 81       	ld	r25, Z
 60c:	e9 2f       	mov	r30, r25
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	31 97       	sbiw	r30, 0x01	; 1
 612:	d9 01       	movw	r26, r18
 614:	a0 5c       	subi	r26, 0xC0	; 192
 616:	bf 4f       	sbci	r27, 0xFF	; 255
 618:	8c 91       	ld	r24, X
 61a:	98 17       	cp	r25, r24
 61c:	a1 f0       	breq	.+40     	; 0x646 <rb_pop_back_F+0x44>
 61e:	ee 0f       	add	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	ee 0f       	add	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	e2 0f       	add	r30, r18
 628:	f3 1f       	adc	r31, r19
 62a:	60 81       	ld	r22, Z
 62c:	51 81       	ldd	r21, Z+1	; 0x01
 62e:	42 81       	ldd	r20, Z+2	; 0x02
 630:	83 81       	ldd	r24, Z+3	; 0x03
 632:	f9 01       	movw	r30, r18
 634:	ef 5b       	subi	r30, 0xBF	; 191
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	91 50       	subi	r25, 0x01	; 1
 63a:	9f 70       	andi	r25, 0x0F	; 15
 63c:	90 83       	st	Z, r25
 63e:	e6 2f       	mov	r30, r22
 640:	34 2f       	mov	r19, r20
 642:	28 2f       	mov	r18, r24
 644:	04 c0       	rjmp	.+8      	; 0x64e <rb_pop_back_F+0x4c>
 646:	e0 e0       	ldi	r30, 0x00	; 0
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	6e 2f       	mov	r22, r30
 650:	75 2f       	mov	r23, r21
 652:	83 2f       	mov	r24, r19
 654:	92 2f       	mov	r25, r18
 656:	08 95       	ret

00000658 <rb_get_F>:
 658:	fc 01       	movw	r30, r24
 65a:	e0 5c       	subi	r30, 0xC0	; 192
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	20 81       	ld	r18, Z
 660:	31 96       	adiw	r30, 0x01	; 1
 662:	30 81       	ld	r19, Z
 664:	23 17       	cp	r18, r19
 666:	69 f0       	breq	.+26     	; 0x682 <rb_get_F+0x2a>
 668:	62 0f       	add	r22, r18
 66a:	6f 70       	andi	r22, 0x0F	; 15
 66c:	fc 01       	movw	r30, r24
 66e:	24 e0       	ldi	r18, 0x04	; 4
 670:	62 9f       	mul	r22, r18
 672:	e0 0d       	add	r30, r0
 674:	f1 1d       	adc	r31, r1
 676:	11 24       	eor	r1, r1
 678:	60 81       	ld	r22, Z
 67a:	71 81       	ldd	r23, Z+1	; 0x01
 67c:	82 81       	ldd	r24, Z+2	; 0x02
 67e:	93 81       	ldd	r25, Z+3	; 0x03
 680:	08 95       	ret
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	cb 01       	movw	r24, r22
 688:	08 95       	ret

0000068a <rb_set_F>:
/* set element - This behavior is 
   poorly defined if index is outside of active length.
   Use of the push_back or push_front methods are prefered.
*/
void  rb_set_F( struct Ring_Buffer_F* p_buf, uint8_t index, float value)
{
 68a:	fc 01       	movw	r30, r24
    // set value at start + index wrapped properly
    index = (p_buf->start_index + index) & RB_MASK_F;
 68c:	dc 01       	movw	r26, r24
 68e:	a0 5c       	subi	r26, 0xC0	; 192
 690:	bf 4f       	sbci	r27, 0xFF	; 255
 692:	9c 91       	ld	r25, X
 694:	69 0f       	add	r22, r25
    p_buf->buffer[index] = value;
 696:	6f 70       	andi	r22, 0x0F	; 15
 698:	84 e0       	ldi	r24, 0x04	; 4
 69a:	68 9f       	mul	r22, r24
 69c:	e0 0d       	add	r30, r0
 69e:	f1 1d       	adc	r31, r1
 6a0:	11 24       	eor	r1, r1
 6a2:	20 83       	st	Z, r18
 6a4:	31 83       	std	Z+1, r19	; 0x01
 6a6:	42 83       	std	Z+2, r20	; 0x02
 6a8:	53 83       	std	Z+3, r21	; 0x03
 6aa:	08 95       	ret

000006ac <timer0_init>:
#include <avr/io.h>
#include "Timers.h"

void timer0_init(int prescaler,int compVal)
{
 6ac:	9c 01       	movw	r18, r24
	// enable CTC for Timer0
	TCCR0A |= (1 << WGM01);
 6ae:	94 b5       	in	r25, 0x24	; 36
 6b0:	92 60       	ori	r25, 0x02	; 2
 6b2:	94 bd       	out	0x24, r25	; 36
	// set appropriate prescaler
	if(prescaler == 0){
 6b4:	21 15       	cp	r18, r1
 6b6:	31 05       	cpc	r19, r1
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <timer0_init+0x16>
		TCCR0B |= (1 << CS00);
 6ba:	85 b5       	in	r24, 0x25	; 37
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	85 bd       	out	0x25, r24	; 37
 6c0:	0e c0       	rjmp	.+28     	; 0x6de <timer0_init+0x32>
	} 
	if(prescaler == 8){
 6c2:	28 30       	cpi	r18, 0x08	; 8
 6c4:	31 05       	cpc	r19, r1
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <timer0_init+0x24>
		TCCR0B |= (1 << CS01);
 6c8:	85 b5       	in	r24, 0x25	; 37
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	85 bd       	out	0x25, r24	; 37
 6ce:	0f c0       	rjmp	.+30     	; 0x6ee <timer0_init+0x42>
	} 
	if(prescaler == 64){
 6d0:	20 34       	cpi	r18, 0x40	; 64
 6d2:	31 05       	cpc	r19, r1
 6d4:	21 f4       	brne	.+8      	; 0x6de <timer0_init+0x32>
		TCCR0B |= (1 << CS00)|(1 << CS01);
 6d6:	85 b5       	in	r24, 0x25	; 37
 6d8:	83 60       	ori	r24, 0x03	; 3
 6da:	85 bd       	out	0x25, r24	; 37
 6dc:	0e c0       	rjmp	.+28     	; 0x6fa <timer0_init+0x4e>
	} 
	if(prescaler == 256){
 6de:	21 15       	cp	r18, r1
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	38 07       	cpc	r19, r24
 6e4:	21 f4       	brne	.+8      	; 0x6ee <timer0_init+0x42>
		TCCR0B |= (1 << CS02);
 6e6:	85 b5       	in	r24, 0x25	; 37
 6e8:	84 60       	ori	r24, 0x04	; 4
 6ea:	85 bd       	out	0x25, r24	; 37
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <timer0_init+0x4e>
	} 
	if(prescaler == 1024){
 6ee:	21 15       	cp	r18, r1
 6f0:	34 40       	sbci	r19, 0x04	; 4
 6f2:	19 f4       	brne	.+6      	; 0x6fa <timer0_init+0x4e>
		TCCR0B |= (1 << CS02)|(1 << CS00);
 6f4:	85 b5       	in	r24, 0x25	; 37
 6f6:	85 60       	ori	r24, 0x05	; 5
 6f8:	85 bd       	out	0x25, r24	; 37
	} 
	// initialize counter to zero
	TCNT0 = 0;
 6fa:	16 bc       	out	0x26, r1	; 38
	// initialize compare value for CTC
	OCR0A = compVal;
 6fc:	67 bd       	out	0x27, r22	; 39
 6fe:	08 95       	ret

00000700 <timer1_init>:
}

void timer1_init(int prescaler,int compVal)
{
 700:	9c 01       	movw	r18, r24
	// enable CTC for Timer1
	TCCR0B |= (1 << WGM12);
 702:	95 b5       	in	r25, 0x25	; 37
 704:	98 60       	ori	r25, 0x08	; 8
 706:	95 bd       	out	0x25, r25	; 37
	// set appropriate prescaler
	if(prescaler == 0){
 708:	21 15       	cp	r18, r1
 70a:	31 05       	cpc	r19, r1
 70c:	31 f4       	brne	.+12     	; 0x71a <timer1_init+0x1a>
		TCCR1B |= (1 << CS10);
 70e:	e1 e8       	ldi	r30, 0x81	; 129
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	81 60       	ori	r24, 0x01	; 1
 716:	80 83       	st	Z, r24
 718:	12 c0       	rjmp	.+36     	; 0x73e <timer1_init+0x3e>
	} 
	if(prescaler == 8){
 71a:	28 30       	cpi	r18, 0x08	; 8
 71c:	31 05       	cpc	r19, r1
 71e:	31 f4       	brne	.+12     	; 0x72c <timer1_init+0x2c>
		TCCR1B |= (1 << CS11);
 720:	e1 e8       	ldi	r30, 0x81	; 129
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	82 60       	ori	r24, 0x02	; 2
 728:	80 83       	st	Z, r24
 72a:	13 c0       	rjmp	.+38     	; 0x752 <timer1_init+0x52>
	} 
	if(prescaler == 64){
 72c:	20 34       	cpi	r18, 0x40	; 64
 72e:	31 05       	cpc	r19, r1
 730:	31 f4       	brne	.+12     	; 0x73e <timer1_init+0x3e>
		TCCR1B |= (1 << CS11)|(1 << CS10);
 732:	e1 e8       	ldi	r30, 0x81	; 129
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	83 60       	ori	r24, 0x03	; 3
 73a:	80 83       	st	Z, r24
 73c:	12 c0       	rjmp	.+36     	; 0x762 <timer1_init+0x62>
	} 
	if(prescaler == 256){
 73e:	21 15       	cp	r18, r1
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	38 07       	cpc	r19, r24
 744:	31 f4       	brne	.+12     	; 0x752 <timer1_init+0x52>
		TCCR1B |= (1 << CS12);
 746:	e1 e8       	ldi	r30, 0x81	; 129
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	84 60       	ori	r24, 0x04	; 4
 74e:	80 83       	st	Z, r24
 750:	08 c0       	rjmp	.+16     	; 0x762 <timer1_init+0x62>
	} 
	if(prescaler == 1024){
 752:	21 15       	cp	r18, r1
 754:	34 40       	sbci	r19, 0x04	; 4
 756:	29 f4       	brne	.+10     	; 0x762 <timer1_init+0x62>
		TCCR1B |= (1 << CS10)|(1 << CS12);
 758:	e1 e8       	ldi	r30, 0x81	; 129
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	85 60       	ori	r24, 0x05	; 5
 760:	80 83       	st	Z, r24
	}
	// initialize counter to zero
	TCNT1 = 0;
 762:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 766:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// initialize compare value
	OCR1B = compVal;
 76a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 76e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 772:	08 95       	ret

00000774 <__subsf3>:
 774:	50 58       	subi	r21, 0x80	; 128

00000776 <__addsf3>:
 776:	bb 27       	eor	r27, r27
 778:	aa 27       	eor	r26, r26
 77a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__addsf3x>
 77e:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_round>
 782:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_pscA>
 786:	38 f0       	brcs	.+14     	; 0x796 <__addsf3+0x20>
 788:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscB>
 78c:	20 f0       	brcs	.+8      	; 0x796 <__addsf3+0x20>
 78e:	39 f4       	brne	.+14     	; 0x79e <__addsf3+0x28>
 790:	9f 3f       	cpi	r25, 0xFF	; 255
 792:	19 f4       	brne	.+6      	; 0x79a <__addsf3+0x24>
 794:	26 f4       	brtc	.+8      	; 0x79e <__addsf3+0x28>
 796:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_nan>
 79a:	0e f4       	brtc	.+2      	; 0x79e <__addsf3+0x28>
 79c:	e0 95       	com	r30
 79e:	e7 fb       	bst	r30, 7
 7a0:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>

000007a4 <__addsf3x>:
 7a4:	e9 2f       	mov	r30, r25
 7a6:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_split3>
 7aa:	58 f3       	brcs	.-42     	; 0x782 <__addsf3+0xc>
 7ac:	ba 17       	cp	r27, r26
 7ae:	62 07       	cpc	r22, r18
 7b0:	73 07       	cpc	r23, r19
 7b2:	84 07       	cpc	r24, r20
 7b4:	95 07       	cpc	r25, r21
 7b6:	20 f0       	brcs	.+8      	; 0x7c0 <__addsf3x+0x1c>
 7b8:	79 f4       	brne	.+30     	; 0x7d8 <__addsf3x+0x34>
 7ba:	a6 f5       	brtc	.+104    	; 0x824 <__addsf3x+0x80>
 7bc:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_zero>
 7c0:	0e f4       	brtc	.+2      	; 0x7c4 <__addsf3x+0x20>
 7c2:	e0 95       	com	r30
 7c4:	0b 2e       	mov	r0, r27
 7c6:	ba 2f       	mov	r27, r26
 7c8:	a0 2d       	mov	r26, r0
 7ca:	0b 01       	movw	r0, r22
 7cc:	b9 01       	movw	r22, r18
 7ce:	90 01       	movw	r18, r0
 7d0:	0c 01       	movw	r0, r24
 7d2:	ca 01       	movw	r24, r20
 7d4:	a0 01       	movw	r20, r0
 7d6:	11 24       	eor	r1, r1
 7d8:	ff 27       	eor	r31, r31
 7da:	59 1b       	sub	r21, r25
 7dc:	99 f0       	breq	.+38     	; 0x804 <__addsf3x+0x60>
 7de:	59 3f       	cpi	r21, 0xF9	; 249
 7e0:	50 f4       	brcc	.+20     	; 0x7f6 <__addsf3x+0x52>
 7e2:	50 3e       	cpi	r21, 0xE0	; 224
 7e4:	68 f1       	brcs	.+90     	; 0x840 <__addsf3x+0x9c>
 7e6:	1a 16       	cp	r1, r26
 7e8:	f0 40       	sbci	r31, 0x00	; 0
 7ea:	a2 2f       	mov	r26, r18
 7ec:	23 2f       	mov	r18, r19
 7ee:	34 2f       	mov	r19, r20
 7f0:	44 27       	eor	r20, r20
 7f2:	58 5f       	subi	r21, 0xF8	; 248
 7f4:	f3 cf       	rjmp	.-26     	; 0x7dc <__addsf3x+0x38>
 7f6:	46 95       	lsr	r20
 7f8:	37 95       	ror	r19
 7fa:	27 95       	ror	r18
 7fc:	a7 95       	ror	r26
 7fe:	f0 40       	sbci	r31, 0x00	; 0
 800:	53 95       	inc	r21
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__addsf3x+0x52>
 804:	7e f4       	brtc	.+30     	; 0x824 <__addsf3x+0x80>
 806:	1f 16       	cp	r1, r31
 808:	ba 0b       	sbc	r27, r26
 80a:	62 0b       	sbc	r22, r18
 80c:	73 0b       	sbc	r23, r19
 80e:	84 0b       	sbc	r24, r20
 810:	ba f0       	brmi	.+46     	; 0x840 <__addsf3x+0x9c>
 812:	91 50       	subi	r25, 0x01	; 1
 814:	a1 f0       	breq	.+40     	; 0x83e <__addsf3x+0x9a>
 816:	ff 0f       	add	r31, r31
 818:	bb 1f       	adc	r27, r27
 81a:	66 1f       	adc	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	c2 f7       	brpl	.-16     	; 0x812 <__addsf3x+0x6e>
 822:	0e c0       	rjmp	.+28     	; 0x840 <__addsf3x+0x9c>
 824:	ba 0f       	add	r27, r26
 826:	62 1f       	adc	r22, r18
 828:	73 1f       	adc	r23, r19
 82a:	84 1f       	adc	r24, r20
 82c:	48 f4       	brcc	.+18     	; 0x840 <__addsf3x+0x9c>
 82e:	87 95       	ror	r24
 830:	77 95       	ror	r23
 832:	67 95       	ror	r22
 834:	b7 95       	ror	r27
 836:	f7 95       	ror	r31
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	08 f0       	brcs	.+2      	; 0x83e <__addsf3x+0x9a>
 83c:	b0 cf       	rjmp	.-160    	; 0x79e <__addsf3+0x28>
 83e:	93 95       	inc	r25
 840:	88 0f       	add	r24, r24
 842:	08 f0       	brcs	.+2      	; 0x846 <__addsf3x+0xa2>
 844:	99 27       	eor	r25, r25
 846:	ee 0f       	add	r30, r30
 848:	97 95       	ror	r25
 84a:	87 95       	ror	r24
 84c:	08 95       	ret

0000084e <__cmpsf2>:
 84e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_cmp>
 852:	08 f4       	brcc	.+2      	; 0x856 <__cmpsf2+0x8>
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	08 95       	ret

00000858 <__floatunsisf>:
 858:	e8 94       	clt
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__floatsisf+0x12>

0000085c <__floatsisf>:
 85c:	97 fb       	bst	r25, 7
 85e:	3e f4       	brtc	.+14     	; 0x86e <__floatsisf+0x12>
 860:	90 95       	com	r25
 862:	80 95       	com	r24
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	99 23       	and	r25, r25
 870:	a9 f0       	breq	.+42     	; 0x89c <__floatsisf+0x40>
 872:	f9 2f       	mov	r31, r25
 874:	96 e9       	ldi	r25, 0x96	; 150
 876:	bb 27       	eor	r27, r27
 878:	93 95       	inc	r25
 87a:	f6 95       	lsr	r31
 87c:	87 95       	ror	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	b7 95       	ror	r27
 884:	f1 11       	cpse	r31, r1
 886:	f8 cf       	rjmp	.-16     	; 0x878 <__floatsisf+0x1c>
 888:	fa f4       	brpl	.+62     	; 0x8c8 <__floatsisf+0x6c>
 88a:	bb 0f       	add	r27, r27
 88c:	11 f4       	brne	.+4      	; 0x892 <__floatsisf+0x36>
 88e:	60 ff       	sbrs	r22, 0
 890:	1b c0       	rjmp	.+54     	; 0x8c8 <__floatsisf+0x6c>
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	16 c0       	rjmp	.+44     	; 0x8c8 <__floatsisf+0x6c>
 89c:	88 23       	and	r24, r24
 89e:	11 f0       	breq	.+4      	; 0x8a4 <__floatsisf+0x48>
 8a0:	96 e9       	ldi	r25, 0x96	; 150
 8a2:	11 c0       	rjmp	.+34     	; 0x8c6 <__floatsisf+0x6a>
 8a4:	77 23       	and	r23, r23
 8a6:	21 f0       	breq	.+8      	; 0x8b0 <__floatsisf+0x54>
 8a8:	9e e8       	ldi	r25, 0x8E	; 142
 8aa:	87 2f       	mov	r24, r23
 8ac:	76 2f       	mov	r23, r22
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <__floatsisf+0x5e>
 8b0:	66 23       	and	r22, r22
 8b2:	71 f0       	breq	.+28     	; 0x8d0 <__floatsisf+0x74>
 8b4:	96 e8       	ldi	r25, 0x86	; 134
 8b6:	86 2f       	mov	r24, r22
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	2a f0       	brmi	.+10     	; 0x8c8 <__floatsisf+0x6c>
 8be:	9a 95       	dec	r25
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	da f7       	brpl	.-10     	; 0x8be <__floatsisf+0x62>
 8c8:	88 0f       	add	r24, r24
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	97 f9       	bld	r25, 7
 8d0:	08 95       	ret

000008d2 <__fp_cmp>:
 8d2:	99 0f       	add	r25, r25
 8d4:	00 08       	sbc	r0, r0
 8d6:	55 0f       	add	r21, r21
 8d8:	aa 0b       	sbc	r26, r26
 8da:	e0 e8       	ldi	r30, 0x80	; 128
 8dc:	fe ef       	ldi	r31, 0xFE	; 254
 8de:	16 16       	cp	r1, r22
 8e0:	17 06       	cpc	r1, r23
 8e2:	e8 07       	cpc	r30, r24
 8e4:	f9 07       	cpc	r31, r25
 8e6:	c0 f0       	brcs	.+48     	; 0x918 <__stack+0x19>
 8e8:	12 16       	cp	r1, r18
 8ea:	13 06       	cpc	r1, r19
 8ec:	e4 07       	cpc	r30, r20
 8ee:	f5 07       	cpc	r31, r21
 8f0:	98 f0       	brcs	.+38     	; 0x918 <__stack+0x19>
 8f2:	62 1b       	sub	r22, r18
 8f4:	73 0b       	sbc	r23, r19
 8f6:	84 0b       	sbc	r24, r20
 8f8:	95 0b       	sbc	r25, r21
 8fa:	39 f4       	brne	.+14     	; 0x90a <__stack+0xb>
 8fc:	0a 26       	eor	r0, r26
 8fe:	61 f0       	breq	.+24     	; 0x918 <__stack+0x19>
 900:	23 2b       	or	r18, r19
 902:	24 2b       	or	r18, r20
 904:	25 2b       	or	r18, r21
 906:	21 f4       	brne	.+8      	; 0x910 <__stack+0x11>
 908:	08 95       	ret
 90a:	0a 26       	eor	r0, r26
 90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
 90e:	a1 40       	sbci	r26, 0x01	; 1
 910:	a6 95       	lsr	r26
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	81 1d       	adc	r24, r1
 916:	81 1d       	adc	r24, r1
 918:	08 95       	ret

0000091a <__fp_inf>:
 91a:	97 f9       	bld	r25, 7
 91c:	9f 67       	ori	r25, 0x7F	; 127
 91e:	80 e8       	ldi	r24, 0x80	; 128
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	08 95       	ret

00000926 <__fp_nan>:
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	80 ec       	ldi	r24, 0xC0	; 192
 92a:	08 95       	ret

0000092c <__fp_pscA>:
 92c:	00 24       	eor	r0, r0
 92e:	0a 94       	dec	r0
 930:	16 16       	cp	r1, r22
 932:	17 06       	cpc	r1, r23
 934:	18 06       	cpc	r1, r24
 936:	09 06       	cpc	r0, r25
 938:	08 95       	ret

0000093a <__fp_pscB>:
 93a:	00 24       	eor	r0, r0
 93c:	0a 94       	dec	r0
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	14 06       	cpc	r1, r20
 944:	05 06       	cpc	r0, r21
 946:	08 95       	ret

00000948 <__fp_round>:
 948:	09 2e       	mov	r0, r25
 94a:	03 94       	inc	r0
 94c:	00 0c       	add	r0, r0
 94e:	11 f4       	brne	.+4      	; 0x954 <__fp_round+0xc>
 950:	88 23       	and	r24, r24
 952:	52 f0       	brmi	.+20     	; 0x968 <__fp_round+0x20>
 954:	bb 0f       	add	r27, r27
 956:	40 f4       	brcc	.+16     	; 0x968 <__fp_round+0x20>
 958:	bf 2b       	or	r27, r31
 95a:	11 f4       	brne	.+4      	; 0x960 <__fp_round+0x18>
 95c:	60 ff       	sbrs	r22, 0
 95e:	04 c0       	rjmp	.+8      	; 0x968 <__fp_round+0x20>
 960:	6f 5f       	subi	r22, 0xFF	; 255
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <__fp_split3>:
 96a:	57 fd       	sbrc	r21, 7
 96c:	90 58       	subi	r25, 0x80	; 128
 96e:	44 0f       	add	r20, r20
 970:	55 1f       	adc	r21, r21
 972:	59 f0       	breq	.+22     	; 0x98a <__fp_splitA+0x10>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	71 f0       	breq	.+28     	; 0x994 <__fp_splitA+0x1a>
 978:	47 95       	ror	r20

0000097a <__fp_splitA>:
 97a:	88 0f       	add	r24, r24
 97c:	97 fb       	bst	r25, 7
 97e:	99 1f       	adc	r25, r25
 980:	61 f0       	breq	.+24     	; 0x99a <__fp_splitA+0x20>
 982:	9f 3f       	cpi	r25, 0xFF	; 255
 984:	79 f0       	breq	.+30     	; 0x9a4 <__fp_splitA+0x2a>
 986:	87 95       	ror	r24
 988:	08 95       	ret
 98a:	12 16       	cp	r1, r18
 98c:	13 06       	cpc	r1, r19
 98e:	14 06       	cpc	r1, r20
 990:	55 1f       	adc	r21, r21
 992:	f2 cf       	rjmp	.-28     	; 0x978 <__fp_split3+0xe>
 994:	46 95       	lsr	r20
 996:	f1 df       	rcall	.-30     	; 0x97a <__fp_splitA>
 998:	08 c0       	rjmp	.+16     	; 0x9aa <__fp_splitA+0x30>
 99a:	16 16       	cp	r1, r22
 99c:	17 06       	cpc	r1, r23
 99e:	18 06       	cpc	r1, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	f1 cf       	rjmp	.-30     	; 0x986 <__fp_splitA+0xc>
 9a4:	86 95       	lsr	r24
 9a6:	71 05       	cpc	r23, r1
 9a8:	61 05       	cpc	r22, r1
 9aa:	08 94       	sec
 9ac:	08 95       	ret

000009ae <__fp_zero>:
 9ae:	e8 94       	clt

000009b0 <__fp_szero>:
 9b0:	bb 27       	eor	r27, r27
 9b2:	66 27       	eor	r22, r22
 9b4:	77 27       	eor	r23, r23
 9b6:	cb 01       	movw	r24, r22
 9b8:	97 f9       	bld	r25, 7
 9ba:	08 95       	ret

000009bc <__gesf2>:
 9bc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_cmp>
 9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__gesf2+0x8>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	08 95       	ret

000009c6 <__mulsf3>:
 9c6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__mulsf3x>
 9ca:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_round>
 9ce:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_pscA>
 9d2:	38 f0       	brcs	.+14     	; 0x9e2 <__mulsf3+0x1c>
 9d4:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscB>
 9d8:	20 f0       	brcs	.+8      	; 0x9e2 <__mulsf3+0x1c>
 9da:	95 23       	and	r25, r21
 9dc:	11 f0       	breq	.+4      	; 0x9e2 <__mulsf3+0x1c>
 9de:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
 9e2:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_nan>
 9e6:	11 24       	eor	r1, r1
 9e8:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_szero>

000009ec <__mulsf3x>:
 9ec:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_split3>
 9f0:	70 f3       	brcs	.-36     	; 0x9ce <__mulsf3+0x8>

000009f2 <__mulsf3_pse>:
 9f2:	95 9f       	mul	r25, r21
 9f4:	c1 f3       	breq	.-16     	; 0x9e6 <__mulsf3+0x20>
 9f6:	95 0f       	add	r25, r21
 9f8:	50 e0       	ldi	r21, 0x00	; 0
 9fa:	55 1f       	adc	r21, r21
 9fc:	62 9f       	mul	r22, r18
 9fe:	f0 01       	movw	r30, r0
 a00:	72 9f       	mul	r23, r18
 a02:	bb 27       	eor	r27, r27
 a04:	f0 0d       	add	r31, r0
 a06:	b1 1d       	adc	r27, r1
 a08:	63 9f       	mul	r22, r19
 a0a:	aa 27       	eor	r26, r26
 a0c:	f0 0d       	add	r31, r0
 a0e:	b1 1d       	adc	r27, r1
 a10:	aa 1f       	adc	r26, r26
 a12:	64 9f       	mul	r22, r20
 a14:	66 27       	eor	r22, r22
 a16:	b0 0d       	add	r27, r0
 a18:	a1 1d       	adc	r26, r1
 a1a:	66 1f       	adc	r22, r22
 a1c:	82 9f       	mul	r24, r18
 a1e:	22 27       	eor	r18, r18
 a20:	b0 0d       	add	r27, r0
 a22:	a1 1d       	adc	r26, r1
 a24:	62 1f       	adc	r22, r18
 a26:	73 9f       	mul	r23, r19
 a28:	b0 0d       	add	r27, r0
 a2a:	a1 1d       	adc	r26, r1
 a2c:	62 1f       	adc	r22, r18
 a2e:	83 9f       	mul	r24, r19
 a30:	a0 0d       	add	r26, r0
 a32:	61 1d       	adc	r22, r1
 a34:	22 1f       	adc	r18, r18
 a36:	74 9f       	mul	r23, r20
 a38:	33 27       	eor	r19, r19
 a3a:	a0 0d       	add	r26, r0
 a3c:	61 1d       	adc	r22, r1
 a3e:	23 1f       	adc	r18, r19
 a40:	84 9f       	mul	r24, r20
 a42:	60 0d       	add	r22, r0
 a44:	21 1d       	adc	r18, r1
 a46:	82 2f       	mov	r24, r18
 a48:	76 2f       	mov	r23, r22
 a4a:	6a 2f       	mov	r22, r26
 a4c:	11 24       	eor	r1, r1
 a4e:	9f 57       	subi	r25, 0x7F	; 127
 a50:	50 40       	sbci	r21, 0x00	; 0
 a52:	9a f0       	brmi	.+38     	; 0xa7a <__mulsf3_pse+0x88>
 a54:	f1 f0       	breq	.+60     	; 0xa92 <__mulsf3_pse+0xa0>
 a56:	88 23       	and	r24, r24
 a58:	4a f0       	brmi	.+18     	; 0xa6c <__mulsf3_pse+0x7a>
 a5a:	ee 0f       	add	r30, r30
 a5c:	ff 1f       	adc	r31, r31
 a5e:	bb 1f       	adc	r27, r27
 a60:	66 1f       	adc	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	91 50       	subi	r25, 0x01	; 1
 a68:	50 40       	sbci	r21, 0x00	; 0
 a6a:	a9 f7       	brne	.-22     	; 0xa56 <__mulsf3_pse+0x64>
 a6c:	9e 3f       	cpi	r25, 0xFE	; 254
 a6e:	51 05       	cpc	r21, r1
 a70:	80 f0       	brcs	.+32     	; 0xa92 <__mulsf3_pse+0xa0>
 a72:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
 a76:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_szero>
 a7a:	5f 3f       	cpi	r21, 0xFF	; 255
 a7c:	e4 f3       	brlt	.-8      	; 0xa76 <__mulsf3_pse+0x84>
 a7e:	98 3e       	cpi	r25, 0xE8	; 232
 a80:	d4 f3       	brlt	.-12     	; 0xa76 <__mulsf3_pse+0x84>
 a82:	86 95       	lsr	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f7 95       	ror	r31
 a8c:	e7 95       	ror	r30
 a8e:	9f 5f       	subi	r25, 0xFF	; 255
 a90:	c1 f7       	brne	.-16     	; 0xa82 <__mulsf3_pse+0x90>
 a92:	fe 2b       	or	r31, r30
 a94:	88 0f       	add	r24, r24
 a96:	91 1d       	adc	r25, r1
 a98:	96 95       	lsr	r25
 a9a:	87 95       	ror	r24
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <_exit>:
 aa0:	f8 94       	cli

00000aa2 <__stop_program>:
 aa2:	ff cf       	rjmp	.-2      	; 0xaa2 <__stop_program>
